
dac_dca_sine_wave_gen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f00  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080030d8  080030d8  000040d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080030e8  080030e8  00005234  2**0
                  CONTENTS
  4 .ARM          00000000  080030e8  080030e8  00005234  2**0
                  CONTENTS
  5 .preinit_array 00000000  080030e8  080030e8  00005234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080030e8  080030e8  000040e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080030ec  080030ec  000040ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000234  20000000  080030f0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a0  20000234  08003324  00005234  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003d4  08003324  000053d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005234  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eb7e  00000000  00000000  00005264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002485  00000000  00000000  00013de2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e78  00000000  00000000  00016268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000af1  00000000  00000000  000170e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026258  00000000  00000000  00017bd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f79c  00000000  00000000  0003de29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f9b3c  00000000  00000000  0004d5c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000bc  00000000  00000000  00147101  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c34  00000000  00000000  001471c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009a  00000000  00000000  0014adf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0000088b  00000000  00000000  0014ae8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000020  00000000  00000000  0014b719  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000234 	.word	0x20000234
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080030c0 	.word	0x080030c0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000238 	.word	0x20000238
 8000214:	080030c0 	.word	0x080030c0

08000218 <filter_init>:
static float32_t state[4 * FILTER_ORDER];
arm_biquad_casd_df1_inst_f32 filter;

// Function to initialize filter
void filter_init(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
    arm_biquad_cascade_df1_init_f32(&filter, FILTER_ORDER/2, coeffs, state);
 800021c:	4b03      	ldr	r3, [pc, #12]	@ (800022c <filter_init+0x14>)
 800021e:	4a04      	ldr	r2, [pc, #16]	@ (8000230 <filter_init+0x18>)
 8000220:	2102      	movs	r1, #2
 8000222:	4804      	ldr	r0, [pc, #16]	@ (8000234 <filter_init+0x1c>)
 8000224:	f002 fe1a 	bl	8002e5c <arm_biquad_cascade_df1_init_f32>
}
 8000228:	bf00      	nop
 800022a:	bd80      	pop	{r7, pc}
 800022c:	20000250 	.word	0x20000250
 8000230:	20000200 	.word	0x20000200
 8000234:	20000290 	.word	0x20000290

08000238 <filter_signal>:
//        output[i] = (uint32_t)temp;
//    }
//}

void filter_signal(const uint32_t* input, uint32_t* output, uint32_t size)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	f5ad 6d84 	sub.w	sp, sp, #1056	@ 0x420
 800023e:	af00      	add	r7, sp, #0
 8000240:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 8000244:	f2a3 4314 	subw	r3, r3, #1044	@ 0x414
 8000248:	6018      	str	r0, [r3, #0]
 800024a:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 800024e:	f5a3 6383 	sub.w	r3, r3, #1048	@ 0x418
 8000252:	6019      	str	r1, [r3, #0]
 8000254:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 8000258:	f2a3 431c 	subw	r3, r3, #1052	@ 0x41c
 800025c:	601a      	str	r2, [r3, #0]
    float32_t float_input[BLOCK_SIZE];
    float32_t float_output[BLOCK_SIZE];

    // Convert to float but keep original scale
    for(uint32_t i = 0; i < size; i++)
 800025e:	2300      	movs	r3, #0
 8000260:	f8c7 341c 	str.w	r3, [r7, #1052]	@ 0x41c
 8000264:	e01c      	b.n	80002a0 <filter_signal+0x68>
    {
        float_input[i] = (float32_t)input[i];
 8000266:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 800026a:	009b      	lsls	r3, r3, #2
 800026c:	f507 6284 	add.w	r2, r7, #1056	@ 0x420
 8000270:	f2a2 4214 	subw	r2, r2, #1044	@ 0x414
 8000274:	6812      	ldr	r2, [r2, #0]
 8000276:	4413      	add	r3, r2
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	ee07 3a90 	vmov	s15, r3
 800027e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000282:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 8000286:	f5a3 7203 	sub.w	r2, r3, #524	@ 0x20c
 800028a:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 800028e:	009b      	lsls	r3, r3, #2
 8000290:	4413      	add	r3, r2
 8000292:	edc3 7a00 	vstr	s15, [r3]
    for(uint32_t i = 0; i < size; i++)
 8000296:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 800029a:	3301      	adds	r3, #1
 800029c:	f8c7 341c 	str.w	r3, [r7, #1052]	@ 0x41c
 80002a0:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 80002a4:	f2a3 431c 	subw	r3, r3, #1052	@ 0x41c
 80002a8:	f8d7 241c 	ldr.w	r2, [r7, #1052]	@ 0x41c
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	429a      	cmp	r2, r3
 80002b0:	d3d9      	bcc.n	8000266 <filter_signal+0x2e>
    }

    // Apply filter
    arm_biquad_cascade_df1_f32(&filter, float_input, float_output, size);
 80002b2:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 80002b6:	f2a3 431c 	subw	r3, r3, #1052	@ 0x41c
 80002ba:	f107 0214 	add.w	r2, r7, #20
 80002be:	f507 7105 	add.w	r1, r7, #532	@ 0x214
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	482d      	ldr	r0, [pc, #180]	@ (800037c <filter_signal+0x144>)
 80002c6:	f002 fdd5 	bl	8002e74 <arm_biquad_cascade_df1_f32>

    // Simple scaling - maintain relative amplitudes but ensure within DAC range
    for(uint32_t i = 0; i < size; i++)
 80002ca:	2300      	movs	r3, #0
 80002cc:	f8c7 3418 	str.w	r3, [r7, #1048]	@ 0x418
 80002d0:	e045      	b.n	800035e <filter_signal+0x126>
    {
        // Scale by 0.5 to reduce amplitude a bit but maintain signal character
        float32_t scaled = float_output[i] * 0.0001f;
 80002d2:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 80002d6:	f2a3 420c 	subw	r2, r3, #1036	@ 0x40c
 80002da:	f8d7 3418 	ldr.w	r3, [r7, #1048]	@ 0x418
 80002de:	009b      	lsls	r3, r3, #2
 80002e0:	4413      	add	r3, r2
 80002e2:	edd3 7a00 	vldr	s15, [r3]
 80002e6:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8000380 <filter_signal+0x148>
 80002ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80002ee:	f207 4314 	addw	r3, r7, #1044	@ 0x414
 80002f2:	edc3 7a00 	vstr	s15, [r3]
        // Ensure within DAC range
        if(scaled > 4095.0f) scaled = 4095.0f;
 80002f6:	f207 4314 	addw	r3, r7, #1044	@ 0x414
 80002fa:	edd3 7a00 	vldr	s15, [r3]
 80002fe:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8000384 <filter_signal+0x14c>
 8000302:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000306:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800030a:	dd03      	ble.n	8000314 <filter_signal+0xdc>
 800030c:	4b1e      	ldr	r3, [pc, #120]	@ (8000388 <filter_signal+0x150>)
 800030e:	f207 4214 	addw	r2, r7, #1044	@ 0x414
 8000312:	6013      	str	r3, [r2, #0]
        if(scaled < 0.0f) scaled = 0.0f;
 8000314:	f207 4314 	addw	r3, r7, #1044	@ 0x414
 8000318:	edd3 7a00 	vldr	s15, [r3]
 800031c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000324:	d504      	bpl.n	8000330 <filter_signal+0xf8>
 8000326:	f04f 0300 	mov.w	r3, #0
 800032a:	f207 4214 	addw	r2, r7, #1044	@ 0x414
 800032e:	6013      	str	r3, [r2, #0]
        output[i] = (uint32_t)scaled;
 8000330:	f8d7 3418 	ldr.w	r3, [r7, #1048]	@ 0x418
 8000334:	009b      	lsls	r3, r3, #2
 8000336:	f507 6284 	add.w	r2, r7, #1056	@ 0x420
 800033a:	f5a2 6283 	sub.w	r2, r2, #1048	@ 0x418
 800033e:	6812      	ldr	r2, [r2, #0]
 8000340:	4413      	add	r3, r2
 8000342:	f207 4214 	addw	r2, r7, #1044	@ 0x414
 8000346:	edd2 7a00 	vldr	s15, [r2]
 800034a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800034e:	ee17 2a90 	vmov	r2, s15
 8000352:	601a      	str	r2, [r3, #0]
    for(uint32_t i = 0; i < size; i++)
 8000354:	f8d7 3418 	ldr.w	r3, [r7, #1048]	@ 0x418
 8000358:	3301      	adds	r3, #1
 800035a:	f8c7 3418 	str.w	r3, [r7, #1048]	@ 0x418
 800035e:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 8000362:	f2a3 431c 	subw	r3, r3, #1052	@ 0x41c
 8000366:	f8d7 2418 	ldr.w	r2, [r7, #1048]	@ 0x418
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	429a      	cmp	r2, r3
 800036e:	d3b0      	bcc.n	80002d2 <filter_signal+0x9a>
    }
}
 8000370:	bf00      	nop
 8000372:	bf00      	nop
 8000374:	f507 6784 	add.w	r7, r7, #1056	@ 0x420
 8000378:	46bd      	mov	sp, r7
 800037a:	bd80      	pop	{r7, pc}
 800037c:	20000290 	.word	0x20000290
 8000380:	38d1b717 	.word	0x38d1b717
 8000384:	457ff000 	.word	0x457ff000
 8000388:	457ff000 	.word	0x457ff000

0800038c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8000392:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000394:	f000 fb1c 	bl	80009d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000398:	f000 f830 	bl	80003fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800039c:	f000 f96e 	bl	800067c <MX_GPIO_Init>
  MX_DMA_Init();
 80003a0:	f000 f93a 	bl	8000618 <MX_DMA_Init>
  MX_DAC1_Init();
 80003a4:	f000 f876 	bl	8000494 <MX_DAC1_Init>
  MX_TIM2_Init();
 80003a8:	f000 f8e8 	bl	800057c <MX_TIM2_Init>
  MX_DAC2_Init();
 80003ac:	f000 f8ac 	bl	8000508 <MX_DAC2_Init>
  /* USER CODE BEGIN 2 */
  // Initialize filter
  filter_init();
 80003b0:	f7ff ff32 	bl	8000218 <filter_init>

  // Create buffer for filtered signal
  uint32_t filtered_buffer[NS];

  // Apply filter to noisy signal
  filter_signal(noisy_ecg, filtered_buffer, NS);
 80003b4:	463b      	mov	r3, r7
 80003b6:	2280      	movs	r2, #128	@ 0x80
 80003b8:	4619      	mov	r1, r3
 80003ba:	480c      	ldr	r0, [pc, #48]	@ (80003ec <main+0x60>)
 80003bc:	f7ff ff3c 	bl	8000238 <filter_signal>

  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)filtered_buffer, 128, DAC_ALIGN_12B_R);
 80003c0:	463a      	mov	r2, r7
 80003c2:	2300      	movs	r3, #0
 80003c4:	9300      	str	r3, [sp, #0]
 80003c6:	2380      	movs	r3, #128	@ 0x80
 80003c8:	2100      	movs	r1, #0
 80003ca:	4809      	ldr	r0, [pc, #36]	@ (80003f0 <main+0x64>)
 80003cc:	f000 fca2 	bl	8000d14 <HAL_DAC_Start_DMA>
  HAL_DAC_Start_DMA(&hdac2, DAC_CHANNEL_1, (uint32_t*)noisy_ecg, 128, DAC_ALIGN_12B_R);
 80003d0:	2300      	movs	r3, #0
 80003d2:	9300      	str	r3, [sp, #0]
 80003d4:	2380      	movs	r3, #128	@ 0x80
 80003d6:	4a05      	ldr	r2, [pc, #20]	@ (80003ec <main+0x60>)
 80003d8:	2100      	movs	r1, #0
 80003da:	4806      	ldr	r0, [pc, #24]	@ (80003f4 <main+0x68>)
 80003dc:	f000 fc9a 	bl	8000d14 <HAL_DAC_Start_DMA>
  HAL_TIM_Base_Start(&htim2);
 80003e0:	4805      	ldr	r0, [pc, #20]	@ (80003f8 <main+0x6c>)
 80003e2:	f002 f9cf 	bl	8002784 <HAL_TIM_Base_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80003e6:	bf00      	nop
 80003e8:	e7fd      	b.n	80003e6 <main+0x5a>
 80003ea:	bf00      	nop
 80003ec:	20000000 	.word	0x20000000
 80003f0:	2000029c 	.word	0x2000029c
 80003f4:	200002b0 	.word	0x200002b0
 80003f8:	20000384 	.word	0x20000384

080003fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b094      	sub	sp, #80	@ 0x50
 8000400:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000402:	f107 0318 	add.w	r3, r7, #24
 8000406:	2238      	movs	r2, #56	@ 0x38
 8000408:	2100      	movs	r1, #0
 800040a:	4618      	mov	r0, r3
 800040c:	f002 fe2c 	bl	8003068 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000410:	1d3b      	adds	r3, r7, #4
 8000412:	2200      	movs	r2, #0
 8000414:	601a      	str	r2, [r3, #0]
 8000416:	605a      	str	r2, [r3, #4]
 8000418:	609a      	str	r2, [r3, #8]
 800041a:	60da      	str	r2, [r3, #12]
 800041c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800041e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000422:	f001 fba1 	bl	8001b68 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000426:	2302      	movs	r3, #2
 8000428:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800042a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800042e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000430:	2340      	movs	r3, #64	@ 0x40
 8000432:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000434:	2302      	movs	r3, #2
 8000436:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000438:	2302      	movs	r3, #2
 800043a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800043c:	2301      	movs	r3, #1
 800043e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000440:	230a      	movs	r3, #10
 8000442:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000444:	2302      	movs	r3, #2
 8000446:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000448:	2302      	movs	r3, #2
 800044a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800044c:	2302      	movs	r3, #2
 800044e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000450:	f107 0318 	add.w	r3, r7, #24
 8000454:	4618      	mov	r0, r3
 8000456:	f001 fc3b 	bl	8001cd0 <HAL_RCC_OscConfig>
 800045a:	4603      	mov	r3, r0
 800045c:	2b00      	cmp	r3, #0
 800045e:	d001      	beq.n	8000464 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000460:	f000 f924 	bl	80006ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000464:	230f      	movs	r3, #15
 8000466:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000468:	2303      	movs	r3, #3
 800046a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800046c:	2300      	movs	r3, #0
 800046e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000470:	2300      	movs	r3, #0
 8000472:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000474:	2300      	movs	r3, #0
 8000476:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000478:	1d3b      	adds	r3, r7, #4
 800047a:	2102      	movs	r1, #2
 800047c:	4618      	mov	r0, r3
 800047e:	f001 ff39 	bl	80022f4 <HAL_RCC_ClockConfig>
 8000482:	4603      	mov	r3, r0
 8000484:	2b00      	cmp	r3, #0
 8000486:	d001      	beq.n	800048c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000488:	f000 f910 	bl	80006ac <Error_Handler>
  }
}
 800048c:	bf00      	nop
 800048e:	3750      	adds	r7, #80	@ 0x50
 8000490:	46bd      	mov	sp, r7
 8000492:	bd80      	pop	{r7, pc}

08000494 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b08c      	sub	sp, #48	@ 0x30
 8000498:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800049a:	463b      	mov	r3, r7
 800049c:	2230      	movs	r2, #48	@ 0x30
 800049e:	2100      	movs	r1, #0
 80004a0:	4618      	mov	r0, r3
 80004a2:	f002 fde1 	bl	8003068 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80004a6:	4b16      	ldr	r3, [pc, #88]	@ (8000500 <MX_DAC1_Init+0x6c>)
 80004a8:	4a16      	ldr	r2, [pc, #88]	@ (8000504 <MX_DAC1_Init+0x70>)
 80004aa:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80004ac:	4814      	ldr	r0, [pc, #80]	@ (8000500 <MX_DAC1_Init+0x6c>)
 80004ae:	f000 fc0e 	bl	8000cce <HAL_DAC_Init>
 80004b2:	4603      	mov	r3, r0
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d001      	beq.n	80004bc <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80004b8:	f000 f8f8 	bl	80006ac <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80004bc:	2302      	movs	r3, #2
 80004be:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80004c0:	2300      	movs	r3, #0
 80004c2:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80004c4:	2300      	movs	r3, #0
 80004c6:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80004c8:	2300      	movs	r3, #0
 80004ca:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 80004cc:	2312      	movs	r3, #18
 80004ce:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80004d0:	2300      	movs	r3, #0
 80004d2:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80004d4:	2300      	movs	r3, #0
 80004d6:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 80004d8:	2301      	movs	r3, #1
 80004da:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80004dc:	2300      	movs	r3, #0
 80004de:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80004e0:	463b      	mov	r3, r7
 80004e2:	2200      	movs	r2, #0
 80004e4:	4619      	mov	r1, r3
 80004e6:	4806      	ldr	r0, [pc, #24]	@ (8000500 <MX_DAC1_Init+0x6c>)
 80004e8:	f000 fd06 	bl	8000ef8 <HAL_DAC_ConfigChannel>
 80004ec:	4603      	mov	r3, r0
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d001      	beq.n	80004f6 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 80004f2:	f000 f8db 	bl	80006ac <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80004f6:	bf00      	nop
 80004f8:	3730      	adds	r7, #48	@ 0x30
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	bf00      	nop
 8000500:	2000029c 	.word	0x2000029c
 8000504:	50000800 	.word	0x50000800

08000508 <MX_DAC2_Init>:
  * @brief DAC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC2_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b08c      	sub	sp, #48	@ 0x30
 800050c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC2_Init 0 */

  /* USER CODE END DAC2_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800050e:	463b      	mov	r3, r7
 8000510:	2230      	movs	r2, #48	@ 0x30
 8000512:	2100      	movs	r1, #0
 8000514:	4618      	mov	r0, r3
 8000516:	f002 fda7 	bl	8003068 <memset>

  /* USER CODE END DAC2_Init 1 */

  /** DAC Initialization
  */
  hdac2.Instance = DAC2;
 800051a:	4b16      	ldr	r3, [pc, #88]	@ (8000574 <MX_DAC2_Init+0x6c>)
 800051c:	4a16      	ldr	r2, [pc, #88]	@ (8000578 <MX_DAC2_Init+0x70>)
 800051e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 8000520:	4814      	ldr	r0, [pc, #80]	@ (8000574 <MX_DAC2_Init+0x6c>)
 8000522:	f000 fbd4 	bl	8000cce <HAL_DAC_Init>
 8000526:	4603      	mov	r3, r0
 8000528:	2b00      	cmp	r3, #0
 800052a:	d001      	beq.n	8000530 <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 800052c:	f000 f8be 	bl	80006ac <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000530:	2302      	movs	r3, #2
 8000532:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000534:	2300      	movs	r3, #0
 8000536:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000538:	2300      	movs	r3, #0
 800053a:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800053c:	2300      	movs	r3, #0
 800053e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000540:	2312      	movs	r3, #18
 8000542:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000544:	2300      	movs	r3, #0
 8000546:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000548:	2300      	movs	r3, #0
 800054a:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 800054c:	2301      	movs	r3, #1
 800054e:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000550:	2300      	movs	r3, #0
 8000552:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000554:	463b      	mov	r3, r7
 8000556:	2200      	movs	r2, #0
 8000558:	4619      	mov	r1, r3
 800055a:	4806      	ldr	r0, [pc, #24]	@ (8000574 <MX_DAC2_Init+0x6c>)
 800055c:	f000 fccc 	bl	8000ef8 <HAL_DAC_ConfigChannel>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d001      	beq.n	800056a <MX_DAC2_Init+0x62>
  {
    Error_Handler();
 8000566:	f000 f8a1 	bl	80006ac <Error_Handler>
  }
  /* USER CODE BEGIN DAC2_Init 2 */

  /* USER CODE END DAC2_Init 2 */

}
 800056a:	bf00      	nop
 800056c:	3730      	adds	r7, #48	@ 0x30
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	200002b0 	.word	0x200002b0
 8000578:	50000c00 	.word	0x50000c00

0800057c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b088      	sub	sp, #32
 8000580:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000582:	f107 0310 	add.w	r3, r7, #16
 8000586:	2200      	movs	r2, #0
 8000588:	601a      	str	r2, [r3, #0]
 800058a:	605a      	str	r2, [r3, #4]
 800058c:	609a      	str	r2, [r3, #8]
 800058e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000590:	1d3b      	adds	r3, r7, #4
 8000592:	2200      	movs	r2, #0
 8000594:	601a      	str	r2, [r3, #0]
 8000596:	605a      	str	r2, [r3, #4]
 8000598:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800059a:	4b1e      	ldr	r3, [pc, #120]	@ (8000614 <MX_TIM2_Init+0x98>)
 800059c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80005a0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 999;
 80005a2:	4b1c      	ldr	r3, [pc, #112]	@ (8000614 <MX_TIM2_Init+0x98>)
 80005a4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80005a8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005aa:	4b1a      	ldr	r3, [pc, #104]	@ (8000614 <MX_TIM2_Init+0x98>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 520;
 80005b0:	4b18      	ldr	r3, [pc, #96]	@ (8000614 <MX_TIM2_Init+0x98>)
 80005b2:	f44f 7202 	mov.w	r2, #520	@ 0x208
 80005b6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005b8:	4b16      	ldr	r3, [pc, #88]	@ (8000614 <MX_TIM2_Init+0x98>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005be:	4b15      	ldr	r3, [pc, #84]	@ (8000614 <MX_TIM2_Init+0x98>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80005c4:	4813      	ldr	r0, [pc, #76]	@ (8000614 <MX_TIM2_Init+0x98>)
 80005c6:	f002 f885 	bl	80026d4 <HAL_TIM_Base_Init>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80005d0:	f000 f86c 	bl	80006ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005d8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80005da:	f107 0310 	add.w	r3, r7, #16
 80005de:	4619      	mov	r1, r3
 80005e0:	480c      	ldr	r0, [pc, #48]	@ (8000614 <MX_TIM2_Init+0x98>)
 80005e2:	f002 f93f 	bl	8002864 <HAL_TIM_ConfigClockSource>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80005ec:	f000 f85e 	bl	80006ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80005f0:	2320      	movs	r3, #32
 80005f2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005f4:	2300      	movs	r3, #0
 80005f6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80005f8:	1d3b      	adds	r3, r7, #4
 80005fa:	4619      	mov	r1, r3
 80005fc:	4805      	ldr	r0, [pc, #20]	@ (8000614 <MX_TIM2_Init+0x98>)
 80005fe:	f002 fb97 	bl	8002d30 <HAL_TIMEx_MasterConfigSynchronization>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000608:	f000 f850 	bl	80006ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800060c:	bf00      	nop
 800060e:	3720      	adds	r7, #32
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	20000384 	.word	0x20000384

08000618 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800061e:	4b16      	ldr	r3, [pc, #88]	@ (8000678 <MX_DMA_Init+0x60>)
 8000620:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000622:	4a15      	ldr	r2, [pc, #84]	@ (8000678 <MX_DMA_Init+0x60>)
 8000624:	f043 0304 	orr.w	r3, r3, #4
 8000628:	6493      	str	r3, [r2, #72]	@ 0x48
 800062a:	4b13      	ldr	r3, [pc, #76]	@ (8000678 <MX_DMA_Init+0x60>)
 800062c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800062e:	f003 0304 	and.w	r3, r3, #4
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000636:	4b10      	ldr	r3, [pc, #64]	@ (8000678 <MX_DMA_Init+0x60>)
 8000638:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800063a:	4a0f      	ldr	r2, [pc, #60]	@ (8000678 <MX_DMA_Init+0x60>)
 800063c:	f043 0301 	orr.w	r3, r3, #1
 8000640:	6493      	str	r3, [r2, #72]	@ 0x48
 8000642:	4b0d      	ldr	r3, [pc, #52]	@ (8000678 <MX_DMA_Init+0x60>)
 8000644:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000646:	f003 0301 	and.w	r3, r3, #1
 800064a:	603b      	str	r3, [r7, #0]
 800064c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800064e:	2200      	movs	r2, #0
 8000650:	2100      	movs	r1, #0
 8000652:	200b      	movs	r0, #11
 8000654:	f000 fb07 	bl	8000c66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000658:	200b      	movs	r0, #11
 800065a:	f000 fb1e 	bl	8000c9a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800065e:	2200      	movs	r2, #0
 8000660:	2100      	movs	r1, #0
 8000662:	200c      	movs	r0, #12
 8000664:	f000 faff 	bl	8000c66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000668:	200c      	movs	r0, #12
 800066a:	f000 fb16 	bl	8000c9a <HAL_NVIC_EnableIRQ>

}
 800066e:	bf00      	nop
 8000670:	3708      	adds	r7, #8
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	40021000 	.word	0x40021000

0800067c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800067c:	b480      	push	{r7}
 800067e:	b083      	sub	sp, #12
 8000680:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000682:	4b09      	ldr	r3, [pc, #36]	@ (80006a8 <MX_GPIO_Init+0x2c>)
 8000684:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000686:	4a08      	ldr	r2, [pc, #32]	@ (80006a8 <MX_GPIO_Init+0x2c>)
 8000688:	f043 0301 	orr.w	r3, r3, #1
 800068c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800068e:	4b06      	ldr	r3, [pc, #24]	@ (80006a8 <MX_GPIO_Init+0x2c>)
 8000690:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000692:	f003 0301 	and.w	r3, r3, #1
 8000696:	607b      	str	r3, [r7, #4]
 8000698:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800069a:	bf00      	nop
 800069c:	370c      	adds	r7, #12
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop
 80006a8:	40021000 	.word	0x40021000

080006ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006b0:	b672      	cpsid	i
}
 80006b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006b4:	bf00      	nop
 80006b6:	e7fd      	b.n	80006b4 <Error_Handler+0x8>

080006b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006be:	4b0f      	ldr	r3, [pc, #60]	@ (80006fc <HAL_MspInit+0x44>)
 80006c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80006c2:	4a0e      	ldr	r2, [pc, #56]	@ (80006fc <HAL_MspInit+0x44>)
 80006c4:	f043 0301 	orr.w	r3, r3, #1
 80006c8:	6613      	str	r3, [r2, #96]	@ 0x60
 80006ca:	4b0c      	ldr	r3, [pc, #48]	@ (80006fc <HAL_MspInit+0x44>)
 80006cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80006ce:	f003 0301 	and.w	r3, r3, #1
 80006d2:	607b      	str	r3, [r7, #4]
 80006d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d6:	4b09      	ldr	r3, [pc, #36]	@ (80006fc <HAL_MspInit+0x44>)
 80006d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80006da:	4a08      	ldr	r2, [pc, #32]	@ (80006fc <HAL_MspInit+0x44>)
 80006dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80006e2:	4b06      	ldr	r3, [pc, #24]	@ (80006fc <HAL_MspInit+0x44>)
 80006e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80006e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006ea:	603b      	str	r3, [r7, #0]
 80006ec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80006ee:	f001 fadf 	bl	8001cb0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006f2:	bf00      	nop
 80006f4:	3708      	adds	r7, #8
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	40021000 	.word	0x40021000

08000700 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b08c      	sub	sp, #48	@ 0x30
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000708:	f107 031c 	add.w	r3, r7, #28
 800070c:	2200      	movs	r2, #0
 800070e:	601a      	str	r2, [r3, #0]
 8000710:	605a      	str	r2, [r3, #4]
 8000712:	609a      	str	r2, [r3, #8]
 8000714:	60da      	str	r2, [r3, #12]
 8000716:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	4a56      	ldr	r2, [pc, #344]	@ (8000878 <HAL_DAC_MspInit+0x178>)
 800071e:	4293      	cmp	r3, r2
 8000720:	d150      	bne.n	80007c4 <HAL_DAC_MspInit+0xc4>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000722:	4b56      	ldr	r3, [pc, #344]	@ (800087c <HAL_DAC_MspInit+0x17c>)
 8000724:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000726:	4a55      	ldr	r2, [pc, #340]	@ (800087c <HAL_DAC_MspInit+0x17c>)
 8000728:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800072c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800072e:	4b53      	ldr	r3, [pc, #332]	@ (800087c <HAL_DAC_MspInit+0x17c>)
 8000730:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000732:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000736:	61bb      	str	r3, [r7, #24]
 8000738:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800073a:	4b50      	ldr	r3, [pc, #320]	@ (800087c <HAL_DAC_MspInit+0x17c>)
 800073c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800073e:	4a4f      	ldr	r2, [pc, #316]	@ (800087c <HAL_DAC_MspInit+0x17c>)
 8000740:	f043 0301 	orr.w	r3, r3, #1
 8000744:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000746:	4b4d      	ldr	r3, [pc, #308]	@ (800087c <HAL_DAC_MspInit+0x17c>)
 8000748:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800074a:	f003 0301 	and.w	r3, r3, #1
 800074e:	617b      	str	r3, [r7, #20]
 8000750:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000752:	2310      	movs	r3, #16
 8000754:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000756:	2303      	movs	r3, #3
 8000758:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075a:	2300      	movs	r3, #0
 800075c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800075e:	f107 031c 	add.w	r3, r7, #28
 8000762:	4619      	mov	r1, r3
 8000764:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000768:	f001 f87c 	bl	8001864 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel1;
 800076c:	4b44      	ldr	r3, [pc, #272]	@ (8000880 <HAL_DAC_MspInit+0x180>)
 800076e:	4a45      	ldr	r2, [pc, #276]	@ (8000884 <HAL_DAC_MspInit+0x184>)
 8000770:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 8000772:	4b43      	ldr	r3, [pc, #268]	@ (8000880 <HAL_DAC_MspInit+0x180>)
 8000774:	2206      	movs	r2, #6
 8000776:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000778:	4b41      	ldr	r3, [pc, #260]	@ (8000880 <HAL_DAC_MspInit+0x180>)
 800077a:	2210      	movs	r2, #16
 800077c:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800077e:	4b40      	ldr	r3, [pc, #256]	@ (8000880 <HAL_DAC_MspInit+0x180>)
 8000780:	2200      	movs	r2, #0
 8000782:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000784:	4b3e      	ldr	r3, [pc, #248]	@ (8000880 <HAL_DAC_MspInit+0x180>)
 8000786:	2280      	movs	r2, #128	@ 0x80
 8000788:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800078a:	4b3d      	ldr	r3, [pc, #244]	@ (8000880 <HAL_DAC_MspInit+0x180>)
 800078c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000790:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000792:	4b3b      	ldr	r3, [pc, #236]	@ (8000880 <HAL_DAC_MspInit+0x180>)
 8000794:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000798:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 800079a:	4b39      	ldr	r3, [pc, #228]	@ (8000880 <HAL_DAC_MspInit+0x180>)
 800079c:	2220      	movs	r2, #32
 800079e:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80007a0:	4b37      	ldr	r3, [pc, #220]	@ (8000880 <HAL_DAC_MspInit+0x180>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 80007a6:	4836      	ldr	r0, [pc, #216]	@ (8000880 <HAL_DAC_MspInit+0x180>)
 80007a8:	f000 fdea 	bl	8001380 <HAL_DMA_Init>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 80007b2:	f7ff ff7b 	bl	80006ac <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	4a31      	ldr	r2, [pc, #196]	@ (8000880 <HAL_DAC_MspInit+0x180>)
 80007ba:	609a      	str	r2, [r3, #8]
 80007bc:	4a30      	ldr	r2, [pc, #192]	@ (8000880 <HAL_DAC_MspInit+0x180>)
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }

}
 80007c2:	e055      	b.n	8000870 <HAL_DAC_MspInit+0x170>
  else if(hdac->Instance==DAC2)
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4a2f      	ldr	r2, [pc, #188]	@ (8000888 <HAL_DAC_MspInit+0x188>)
 80007ca:	4293      	cmp	r3, r2
 80007cc:	d150      	bne.n	8000870 <HAL_DAC_MspInit+0x170>
    __HAL_RCC_DAC2_CLK_ENABLE();
 80007ce:	4b2b      	ldr	r3, [pc, #172]	@ (800087c <HAL_DAC_MspInit+0x17c>)
 80007d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007d2:	4a2a      	ldr	r2, [pc, #168]	@ (800087c <HAL_DAC_MspInit+0x17c>)
 80007d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007da:	4b28      	ldr	r3, [pc, #160]	@ (800087c <HAL_DAC_MspInit+0x17c>)
 80007dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80007e2:	613b      	str	r3, [r7, #16]
 80007e4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e6:	4b25      	ldr	r3, [pc, #148]	@ (800087c <HAL_DAC_MspInit+0x17c>)
 80007e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ea:	4a24      	ldr	r2, [pc, #144]	@ (800087c <HAL_DAC_MspInit+0x17c>)
 80007ec:	f043 0301 	orr.w	r3, r3, #1
 80007f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007f2:	4b22      	ldr	r3, [pc, #136]	@ (800087c <HAL_DAC_MspInit+0x17c>)
 80007f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007f6:	f003 0301 	and.w	r3, r3, #1
 80007fa:	60fb      	str	r3, [r7, #12]
 80007fc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80007fe:	2340      	movs	r3, #64	@ 0x40
 8000800:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000802:	2303      	movs	r3, #3
 8000804:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000806:	2300      	movs	r3, #0
 8000808:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800080a:	f107 031c 	add.w	r3, r7, #28
 800080e:	4619      	mov	r1, r3
 8000810:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000814:	f001 f826 	bl	8001864 <HAL_GPIO_Init>
    hdma_dac2_ch1.Instance = DMA1_Channel2;
 8000818:	4b1c      	ldr	r3, [pc, #112]	@ (800088c <HAL_DAC_MspInit+0x18c>)
 800081a:	4a1d      	ldr	r2, [pc, #116]	@ (8000890 <HAL_DAC_MspInit+0x190>)
 800081c:	601a      	str	r2, [r3, #0]
    hdma_dac2_ch1.Init.Request = DMA_REQUEST_DAC2_CHANNEL1;
 800081e:	4b1b      	ldr	r3, [pc, #108]	@ (800088c <HAL_DAC_MspInit+0x18c>)
 8000820:	2229      	movs	r2, #41	@ 0x29
 8000822:	605a      	str	r2, [r3, #4]
    hdma_dac2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000824:	4b19      	ldr	r3, [pc, #100]	@ (800088c <HAL_DAC_MspInit+0x18c>)
 8000826:	2210      	movs	r2, #16
 8000828:	609a      	str	r2, [r3, #8]
    hdma_dac2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800082a:	4b18      	ldr	r3, [pc, #96]	@ (800088c <HAL_DAC_MspInit+0x18c>)
 800082c:	2200      	movs	r2, #0
 800082e:	60da      	str	r2, [r3, #12]
    hdma_dac2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000830:	4b16      	ldr	r3, [pc, #88]	@ (800088c <HAL_DAC_MspInit+0x18c>)
 8000832:	2280      	movs	r2, #128	@ 0x80
 8000834:	611a      	str	r2, [r3, #16]
    hdma_dac2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000836:	4b15      	ldr	r3, [pc, #84]	@ (800088c <HAL_DAC_MspInit+0x18c>)
 8000838:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800083c:	615a      	str	r2, [r3, #20]
    hdma_dac2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800083e:	4b13      	ldr	r3, [pc, #76]	@ (800088c <HAL_DAC_MspInit+0x18c>)
 8000840:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000844:	619a      	str	r2, [r3, #24]
    hdma_dac2_ch1.Init.Mode = DMA_CIRCULAR;
 8000846:	4b11      	ldr	r3, [pc, #68]	@ (800088c <HAL_DAC_MspInit+0x18c>)
 8000848:	2220      	movs	r2, #32
 800084a:	61da      	str	r2, [r3, #28]
    hdma_dac2_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 800084c:	4b0f      	ldr	r3, [pc, #60]	@ (800088c <HAL_DAC_MspInit+0x18c>)
 800084e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000852:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac2_ch1) != HAL_OK)
 8000854:	480d      	ldr	r0, [pc, #52]	@ (800088c <HAL_DAC_MspInit+0x18c>)
 8000856:	f000 fd93 	bl	8001380 <HAL_DMA_Init>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <HAL_DAC_MspInit+0x164>
      Error_Handler();
 8000860:	f7ff ff24 	bl	80006ac <Error_Handler>
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac2_ch1);
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	4a09      	ldr	r2, [pc, #36]	@ (800088c <HAL_DAC_MspInit+0x18c>)
 8000868:	609a      	str	r2, [r3, #8]
 800086a:	4a08      	ldr	r2, [pc, #32]	@ (800088c <HAL_DAC_MspInit+0x18c>)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8000870:	bf00      	nop
 8000872:	3730      	adds	r7, #48	@ 0x30
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	50000800 	.word	0x50000800
 800087c:	40021000 	.word	0x40021000
 8000880:	200002c4 	.word	0x200002c4
 8000884:	40020008 	.word	0x40020008
 8000888:	50000c00 	.word	0x50000c00
 800088c:	20000324 	.word	0x20000324
 8000890:	4002001c 	.word	0x4002001c

08000894 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000894:	b480      	push	{r7}
 8000896:	b085      	sub	sp, #20
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80008a4:	d10b      	bne.n	80008be <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80008a6:	4b09      	ldr	r3, [pc, #36]	@ (80008cc <HAL_TIM_Base_MspInit+0x38>)
 80008a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008aa:	4a08      	ldr	r2, [pc, #32]	@ (80008cc <HAL_TIM_Base_MspInit+0x38>)
 80008ac:	f043 0301 	orr.w	r3, r3, #1
 80008b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80008b2:	4b06      	ldr	r3, [pc, #24]	@ (80008cc <HAL_TIM_Base_MspInit+0x38>)
 80008b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008b6:	f003 0301 	and.w	r3, r3, #1
 80008ba:	60fb      	str	r3, [r7, #12]
 80008bc:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80008be:	bf00      	nop
 80008c0:	3714      	adds	r7, #20
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop
 80008cc:	40021000 	.word	0x40021000

080008d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008d4:	bf00      	nop
 80008d6:	e7fd      	b.n	80008d4 <NMI_Handler+0x4>

080008d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008dc:	bf00      	nop
 80008de:	e7fd      	b.n	80008dc <HardFault_Handler+0x4>

080008e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008e4:	bf00      	nop
 80008e6:	e7fd      	b.n	80008e4 <MemManage_Handler+0x4>

080008e8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008ec:	bf00      	nop
 80008ee:	e7fd      	b.n	80008ec <BusFault_Handler+0x4>

080008f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008f4:	bf00      	nop
 80008f6:	e7fd      	b.n	80008f4 <UsageFault_Handler+0x4>

080008f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008fc:	bf00      	nop
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr

08000906 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000906:	b480      	push	{r7}
 8000908:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800090a:	bf00      	nop
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr

08000914 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000918:	bf00      	nop
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr

08000922 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000922:	b580      	push	{r7, lr}
 8000924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000926:	f000 f8a5 	bl	8000a74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800092a:	bf00      	nop
 800092c:	bd80      	pop	{r7, pc}
	...

08000930 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8000934:	4802      	ldr	r0, [pc, #8]	@ (8000940 <DMA1_Channel1_IRQHandler+0x10>)
 8000936:	f000 fe46 	bl	80015c6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800093a:	bf00      	nop
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	200002c4 	.word	0x200002c4

08000944 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2_ch1);
 8000948:	4802      	ldr	r0, [pc, #8]	@ (8000954 <DMA1_Channel2_IRQHandler+0x10>)
 800094a:	f000 fe3c 	bl	80015c6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800094e:	bf00      	nop
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	20000324 	.word	0x20000324

08000958 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000958:	480d      	ldr	r0, [pc, #52]	@ (8000990 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800095a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 800095c:	f000 f826 	bl	80009ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000960:	480c      	ldr	r0, [pc, #48]	@ (8000994 <LoopForever+0x6>)
  ldr r1, =_edata
 8000962:	490d      	ldr	r1, [pc, #52]	@ (8000998 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000964:	4a0d      	ldr	r2, [pc, #52]	@ (800099c <LoopForever+0xe>)
  movs r3, #0
 8000966:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000968:	e002      	b.n	8000970 <LoopCopyDataInit>

0800096a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800096a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800096c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800096e:	3304      	adds	r3, #4

08000970 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000970:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000972:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000974:	d3f9      	bcc.n	800096a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000976:	4a0a      	ldr	r2, [pc, #40]	@ (80009a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000978:	4c0a      	ldr	r4, [pc, #40]	@ (80009a4 <LoopForever+0x16>)
  movs r3, #0
 800097a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800097c:	e001      	b.n	8000982 <LoopFillZerobss>

0800097e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800097e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000980:	3204      	adds	r2, #4

08000982 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000982:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000984:	d3fb      	bcc.n	800097e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000986:	f002 fb77 	bl	8003078 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800098a:	f7ff fcff 	bl	800038c <main>

0800098e <LoopForever>:

LoopForever:
    b LoopForever
 800098e:	e7fe      	b.n	800098e <LoopForever>
  ldr   r0, =_estack
 8000990:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000994:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000998:	20000234 	.word	0x20000234
  ldr r2, =_sidata
 800099c:	080030f0 	.word	0x080030f0
  ldr r2, =_sbss
 80009a0:	20000234 	.word	0x20000234
  ldr r4, =_ebss
 80009a4:	200003d4 	.word	0x200003d4

080009a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009a8:	e7fe      	b.n	80009a8 <ADC1_2_IRQHandler>
	...

080009ac <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80009b0:	4b06      	ldr	r3, [pc, #24]	@ (80009cc <SystemInit+0x20>)
 80009b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009b6:	4a05      	ldr	r2, [pc, #20]	@ (80009cc <SystemInit+0x20>)
 80009b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009c0:	bf00      	nop
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	e000ed00 	.word	0xe000ed00

080009d0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009d6:	2300      	movs	r3, #0
 80009d8:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009da:	2003      	movs	r0, #3
 80009dc:	f000 f938 	bl	8000c50 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009e0:	200f      	movs	r0, #15
 80009e2:	f000 f80d 	bl	8000a00 <HAL_InitTick>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d002      	beq.n	80009f2 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80009ec:	2301      	movs	r3, #1
 80009ee:	71fb      	strb	r3, [r7, #7]
 80009f0:	e001      	b.n	80009f6 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80009f2:	f7ff fe61 	bl	80006b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80009f6:	79fb      	ldrb	r3, [r7, #7]

}
 80009f8:	4618      	mov	r0, r3
 80009fa:	3708      	adds	r7, #8
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}

08000a00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b084      	sub	sp, #16
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000a0c:	4b16      	ldr	r3, [pc, #88]	@ (8000a68 <HAL_InitTick+0x68>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d022      	beq.n	8000a5a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000a14:	4b15      	ldr	r3, [pc, #84]	@ (8000a6c <HAL_InitTick+0x6c>)
 8000a16:	681a      	ldr	r2, [r3, #0]
 8000a18:	4b13      	ldr	r3, [pc, #76]	@ (8000a68 <HAL_InitTick+0x68>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000a20:	fbb1 f3f3 	udiv	r3, r1, r3
 8000a24:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f000 f944 	bl	8000cb6 <HAL_SYSTICK_Config>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d10f      	bne.n	8000a54 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	2b0f      	cmp	r3, #15
 8000a38:	d809      	bhi.n	8000a4e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	6879      	ldr	r1, [r7, #4]
 8000a3e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a42:	f000 f910 	bl	8000c66 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a46:	4a0a      	ldr	r2, [pc, #40]	@ (8000a70 <HAL_InitTick+0x70>)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	6013      	str	r3, [r2, #0]
 8000a4c:	e007      	b.n	8000a5e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000a4e:	2301      	movs	r3, #1
 8000a50:	73fb      	strb	r3, [r7, #15]
 8000a52:	e004      	b.n	8000a5e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a54:	2301      	movs	r3, #1
 8000a56:	73fb      	strb	r3, [r7, #15]
 8000a58:	e001      	b.n	8000a5e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a60:	4618      	mov	r0, r3
 8000a62:	3710      	adds	r7, #16
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	20000230 	.word	0x20000230
 8000a6c:	20000228 	.word	0x20000228
 8000a70:	2000022c 	.word	0x2000022c

08000a74 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a78:	4b05      	ldr	r3, [pc, #20]	@ (8000a90 <HAL_IncTick+0x1c>)
 8000a7a:	681a      	ldr	r2, [r3, #0]
 8000a7c:	4b05      	ldr	r3, [pc, #20]	@ (8000a94 <HAL_IncTick+0x20>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4413      	add	r3, r2
 8000a82:	4a03      	ldr	r2, [pc, #12]	@ (8000a90 <HAL_IncTick+0x1c>)
 8000a84:	6013      	str	r3, [r2, #0]
}
 8000a86:	bf00      	nop
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr
 8000a90:	200003d0 	.word	0x200003d0
 8000a94:	20000230 	.word	0x20000230

08000a98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a9c:	4b03      	ldr	r3, [pc, #12]	@ (8000aac <HAL_GetTick+0x14>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	200003d0 	.word	0x200003d0

08000ab0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b085      	sub	sp, #20
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	f003 0307 	and.w	r3, r3, #7
 8000abe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ac0:	4b0c      	ldr	r3, [pc, #48]	@ (8000af4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ac2:	68db      	ldr	r3, [r3, #12]
 8000ac4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ac6:	68ba      	ldr	r2, [r7, #8]
 8000ac8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000acc:	4013      	ands	r3, r2
 8000ace:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ad4:	68bb      	ldr	r3, [r7, #8]
 8000ad6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ad8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000adc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ae0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ae2:	4a04      	ldr	r2, [pc, #16]	@ (8000af4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ae4:	68bb      	ldr	r3, [r7, #8]
 8000ae6:	60d3      	str	r3, [r2, #12]
}
 8000ae8:	bf00      	nop
 8000aea:	3714      	adds	r7, #20
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr
 8000af4:	e000ed00 	.word	0xe000ed00

08000af8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000afc:	4b04      	ldr	r3, [pc, #16]	@ (8000b10 <__NVIC_GetPriorityGrouping+0x18>)
 8000afe:	68db      	ldr	r3, [r3, #12]
 8000b00:	0a1b      	lsrs	r3, r3, #8
 8000b02:	f003 0307 	and.w	r3, r3, #7
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr
 8000b10:	e000ed00 	.word	0xe000ed00

08000b14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	db0b      	blt.n	8000b3e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b26:	79fb      	ldrb	r3, [r7, #7]
 8000b28:	f003 021f 	and.w	r2, r3, #31
 8000b2c:	4907      	ldr	r1, [pc, #28]	@ (8000b4c <__NVIC_EnableIRQ+0x38>)
 8000b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b32:	095b      	lsrs	r3, r3, #5
 8000b34:	2001      	movs	r0, #1
 8000b36:	fa00 f202 	lsl.w	r2, r0, r2
 8000b3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b3e:	bf00      	nop
 8000b40:	370c      	adds	r7, #12
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	e000e100 	.word	0xe000e100

08000b50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b083      	sub	sp, #12
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	4603      	mov	r3, r0
 8000b58:	6039      	str	r1, [r7, #0]
 8000b5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	db0a      	blt.n	8000b7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	b2da      	uxtb	r2, r3
 8000b68:	490c      	ldr	r1, [pc, #48]	@ (8000b9c <__NVIC_SetPriority+0x4c>)
 8000b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b6e:	0112      	lsls	r2, r2, #4
 8000b70:	b2d2      	uxtb	r2, r2
 8000b72:	440b      	add	r3, r1
 8000b74:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b78:	e00a      	b.n	8000b90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	b2da      	uxtb	r2, r3
 8000b7e:	4908      	ldr	r1, [pc, #32]	@ (8000ba0 <__NVIC_SetPriority+0x50>)
 8000b80:	79fb      	ldrb	r3, [r7, #7]
 8000b82:	f003 030f 	and.w	r3, r3, #15
 8000b86:	3b04      	subs	r3, #4
 8000b88:	0112      	lsls	r2, r2, #4
 8000b8a:	b2d2      	uxtb	r2, r2
 8000b8c:	440b      	add	r3, r1
 8000b8e:	761a      	strb	r2, [r3, #24]
}
 8000b90:	bf00      	nop
 8000b92:	370c      	adds	r7, #12
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr
 8000b9c:	e000e100 	.word	0xe000e100
 8000ba0:	e000ed00 	.word	0xe000ed00

08000ba4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b089      	sub	sp, #36	@ 0x24
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	60f8      	str	r0, [r7, #12]
 8000bac:	60b9      	str	r1, [r7, #8]
 8000bae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	f003 0307 	and.w	r3, r3, #7
 8000bb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bb8:	69fb      	ldr	r3, [r7, #28]
 8000bba:	f1c3 0307 	rsb	r3, r3, #7
 8000bbe:	2b04      	cmp	r3, #4
 8000bc0:	bf28      	it	cs
 8000bc2:	2304      	movcs	r3, #4
 8000bc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bc6:	69fb      	ldr	r3, [r7, #28]
 8000bc8:	3304      	adds	r3, #4
 8000bca:	2b06      	cmp	r3, #6
 8000bcc:	d902      	bls.n	8000bd4 <NVIC_EncodePriority+0x30>
 8000bce:	69fb      	ldr	r3, [r7, #28]
 8000bd0:	3b03      	subs	r3, #3
 8000bd2:	e000      	b.n	8000bd6 <NVIC_EncodePriority+0x32>
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bd8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000bdc:	69bb      	ldr	r3, [r7, #24]
 8000bde:	fa02 f303 	lsl.w	r3, r2, r3
 8000be2:	43da      	mvns	r2, r3
 8000be4:	68bb      	ldr	r3, [r7, #8]
 8000be6:	401a      	ands	r2, r3
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bec:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	fa01 f303 	lsl.w	r3, r1, r3
 8000bf6:	43d9      	mvns	r1, r3
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bfc:	4313      	orrs	r3, r2
         );
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	3724      	adds	r7, #36	@ 0x24
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
	...

08000c0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	3b01      	subs	r3, #1
 8000c18:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c1c:	d301      	bcc.n	8000c22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c1e:	2301      	movs	r3, #1
 8000c20:	e00f      	b.n	8000c42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c22:	4a0a      	ldr	r2, [pc, #40]	@ (8000c4c <SysTick_Config+0x40>)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	3b01      	subs	r3, #1
 8000c28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c2a:	210f      	movs	r1, #15
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c30:	f7ff ff8e 	bl	8000b50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c34:	4b05      	ldr	r3, [pc, #20]	@ (8000c4c <SysTick_Config+0x40>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c3a:	4b04      	ldr	r3, [pc, #16]	@ (8000c4c <SysTick_Config+0x40>)
 8000c3c:	2207      	movs	r2, #7
 8000c3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c40:	2300      	movs	r3, #0
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3708      	adds	r7, #8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	e000e010 	.word	0xe000e010

08000c50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c58:	6878      	ldr	r0, [r7, #4]
 8000c5a:	f7ff ff29 	bl	8000ab0 <__NVIC_SetPriorityGrouping>
}
 8000c5e:	bf00      	nop
 8000c60:	3708      	adds	r7, #8
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}

08000c66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c66:	b580      	push	{r7, lr}
 8000c68:	b086      	sub	sp, #24
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	60b9      	str	r1, [r7, #8]
 8000c70:	607a      	str	r2, [r7, #4]
 8000c72:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c74:	f7ff ff40 	bl	8000af8 <__NVIC_GetPriorityGrouping>
 8000c78:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c7a:	687a      	ldr	r2, [r7, #4]
 8000c7c:	68b9      	ldr	r1, [r7, #8]
 8000c7e:	6978      	ldr	r0, [r7, #20]
 8000c80:	f7ff ff90 	bl	8000ba4 <NVIC_EncodePriority>
 8000c84:	4602      	mov	r2, r0
 8000c86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c8a:	4611      	mov	r1, r2
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f7ff ff5f 	bl	8000b50 <__NVIC_SetPriority>
}
 8000c92:	bf00      	nop
 8000c94:	3718      	adds	r7, #24
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}

08000c9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c9a:	b580      	push	{r7, lr}
 8000c9c:	b082      	sub	sp, #8
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ca4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f7ff ff33 	bl	8000b14 <__NVIC_EnableIRQ>
}
 8000cae:	bf00      	nop
 8000cb0:	3708      	adds	r7, #8
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}

08000cb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cb6:	b580      	push	{r7, lr}
 8000cb8:	b082      	sub	sp, #8
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cbe:	6878      	ldr	r0, [r7, #4]
 8000cc0:	f7ff ffa4 	bl	8000c0c <SysTick_Config>
 8000cc4:	4603      	mov	r3, r0
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}

08000cce <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8000cce:	b580      	push	{r7, lr}
 8000cd0:	b082      	sub	sp, #8
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d101      	bne.n	8000ce0 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	e014      	b.n	8000d0a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	791b      	ldrb	r3, [r3, #4]
 8000ce4:	b2db      	uxtb	r3, r3
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d105      	bne.n	8000cf6 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	2200      	movs	r2, #0
 8000cee:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8000cf0:	6878      	ldr	r0, [r7, #4]
 8000cf2:	f7ff fd05 	bl	8000700 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	2202      	movs	r2, #2
 8000cfa:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	2200      	movs	r2, #0
 8000d00:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	2201      	movs	r2, #1
 8000d06:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8000d08:	2300      	movs	r3, #0
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
	...

08000d14 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b088      	sub	sp, #32
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	60f8      	str	r0, [r7, #12]
 8000d1c:	60b9      	str	r1, [r7, #8]
 8000d1e:	607a      	str	r2, [r7, #4]
 8000d20:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d101      	bne.n	8000d2c <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	e0b2      	b.n	8000e92 <HAL_DAC_Start_DMA+0x17e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	795b      	ldrb	r3, [r3, #5]
 8000d30:	2b01      	cmp	r3, #1
 8000d32:	d101      	bne.n	8000d38 <HAL_DAC_Start_DMA+0x24>
 8000d34:	2302      	movs	r3, #2
 8000d36:	e0ac      	b.n	8000e92 <HAL_DAC_Start_DMA+0x17e>
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	2202      	movs	r2, #2
 8000d42:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d129      	bne.n	8000d9e <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	689b      	ldr	r3, [r3, #8]
 8000d4e:	4a53      	ldr	r2, [pc, #332]	@ (8000e9c <HAL_DAC_Start_DMA+0x188>)
 8000d50:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	689b      	ldr	r3, [r3, #8]
 8000d56:	4a52      	ldr	r2, [pc, #328]	@ (8000ea0 <HAL_DAC_Start_DMA+0x18c>)
 8000d58:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	689b      	ldr	r3, [r3, #8]
 8000d5e:	4a51      	ldr	r2, [pc, #324]	@ (8000ea4 <HAL_DAC_Start_DMA+0x190>)
 8000d60:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	681a      	ldr	r2, [r3, #0]
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8000d70:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8000d72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d003      	beq.n	8000d80 <HAL_DAC_Start_DMA+0x6c>
 8000d78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d7a:	2b04      	cmp	r3, #4
 8000d7c:	d005      	beq.n	8000d8a <HAL_DAC_Start_DMA+0x76>
 8000d7e:	e009      	b.n	8000d94 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	3308      	adds	r3, #8
 8000d86:	61bb      	str	r3, [r7, #24]
        break;
 8000d88:	e033      	b.n	8000df2 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	330c      	adds	r3, #12
 8000d90:	61bb      	str	r3, [r7, #24]
        break;
 8000d92:	e02e      	b.n	8000df2 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	3310      	adds	r3, #16
 8000d9a:	61bb      	str	r3, [r7, #24]
        break;
 8000d9c:	e029      	b.n	8000df2 <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	68db      	ldr	r3, [r3, #12]
 8000da2:	4a41      	ldr	r2, [pc, #260]	@ (8000ea8 <HAL_DAC_Start_DMA+0x194>)
 8000da4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	68db      	ldr	r3, [r3, #12]
 8000daa:	4a40      	ldr	r2, [pc, #256]	@ (8000eac <HAL_DAC_Start_DMA+0x198>)
 8000dac:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	68db      	ldr	r3, [r3, #12]
 8000db2:	4a3f      	ldr	r2, [pc, #252]	@ (8000eb0 <HAL_DAC_Start_DMA+0x19c>)
 8000db4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	681a      	ldr	r2, [r3, #0]
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000dc4:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8000dc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d003      	beq.n	8000dd4 <HAL_DAC_Start_DMA+0xc0>
 8000dcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000dce:	2b04      	cmp	r3, #4
 8000dd0:	d005      	beq.n	8000dde <HAL_DAC_Start_DMA+0xca>
 8000dd2:	e009      	b.n	8000de8 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	3314      	adds	r3, #20
 8000dda:	61bb      	str	r3, [r7, #24]
        break;
 8000ddc:	e009      	b.n	8000df2 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	3318      	adds	r3, #24
 8000de4:	61bb      	str	r3, [r7, #24]
        break;
 8000de6:	e004      	b.n	8000df2 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	331c      	adds	r3, #28
 8000dee:	61bb      	str	r3, [r7, #24]
        break;
 8000df0:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8000df2:	68bb      	ldr	r3, [r7, #8]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d111      	bne.n	8000e1c <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	681a      	ldr	r2, [r3, #0]
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8000e06:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	6898      	ldr	r0, [r3, #8]
 8000e0c:	6879      	ldr	r1, [r7, #4]
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	69ba      	ldr	r2, [r7, #24]
 8000e12:	f000 fb5d 	bl	80014d0 <HAL_DMA_Start_IT>
 8000e16:	4603      	mov	r3, r0
 8000e18:	77fb      	strb	r3, [r7, #31]
 8000e1a:	e010      	b.n	8000e3e <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8000e2a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	68d8      	ldr	r0, [r3, #12]
 8000e30:	6879      	ldr	r1, [r7, #4]
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	69ba      	ldr	r2, [r7, #24]
 8000e36:	f000 fb4b 	bl	80014d0 <HAL_DMA_Start_IT>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	77fb      	strb	r3, [r7, #31]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	2200      	movs	r2, #0
 8000e42:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8000e44:	7ffb      	ldrb	r3, [r7, #31]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d11c      	bne.n	8000e84 <HAL_DAC_Start_DMA+0x170>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	6819      	ldr	r1, [r3, #0]
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	f003 0310 	and.w	r3, r3, #16
 8000e56:	2201      	movs	r2, #1
 8000e58:	409a      	lsls	r2, r3
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	430a      	orrs	r2, r1
 8000e60:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000e62:	4b14      	ldr	r3, [pc, #80]	@ (8000eb4 <HAL_DAC_Start_DMA+0x1a0>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	099b      	lsrs	r3, r3, #6
 8000e68:	4a13      	ldr	r2, [pc, #76]	@ (8000eb8 <HAL_DAC_Start_DMA+0x1a4>)
 8000e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e6e:	099b      	lsrs	r3, r3, #6
 8000e70:	3301      	adds	r3, #1
 8000e72:	617b      	str	r3, [r7, #20]
    while (wait_loop_index != 0UL)
 8000e74:	e002      	b.n	8000e7c <HAL_DAC_Start_DMA+0x168>
    {
      wait_loop_index--;
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	3b01      	subs	r3, #1
 8000e7a:	617b      	str	r3, [r7, #20]
    while (wait_loop_index != 0UL)
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d1f9      	bne.n	8000e76 <HAL_DAC_Start_DMA+0x162>
 8000e82:	e005      	b.n	8000e90 <HAL_DAC_Start_DMA+0x17c>
    }
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	691b      	ldr	r3, [r3, #16]
 8000e88:	f043 0204 	orr.w	r2, r3, #4
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8000e90:	7ffb      	ldrb	r3, [r7, #31]
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3720      	adds	r7, #32
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	0800126d 	.word	0x0800126d
 8000ea0:	0800128f 	.word	0x0800128f
 8000ea4:	080012ab 	.word	0x080012ab
 8000ea8:	08001315 	.word	0x08001315
 8000eac:	08001337 	.word	0x08001337
 8000eb0:	08001353 	.word	0x08001353
 8000eb4:	20000228 	.word	0x20000228
 8000eb8:	053e2d63 	.word	0x053e2d63

08000ebc <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8000ec4:	bf00      	nop
 8000ec6:	370c      	adds	r7, #12
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr

08000ed0 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8000ed8:	bf00      	nop
 8000eda:	370c      	adds	r7, #12
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr

08000ee4 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8000eec:	bf00      	nop
 8000eee:	370c      	adds	r7, #12
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr

08000ef8 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b08a      	sub	sp, #40	@ 0x28
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	60f8      	str	r0, [r7, #12]
 8000f00:	60b9      	str	r1, [r7, #8]
 8000f02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f04:	2300      	movs	r3, #0
 8000f06:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d002      	beq.n	8000f14 <HAL_DAC_ConfigChannel+0x1c>
 8000f0e:	68bb      	ldr	r3, [r7, #8]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d101      	bne.n	8000f18 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8000f14:	2301      	movs	r3, #1
 8000f16:	e1a1      	b.n	800125c <HAL_DAC_ConfigChannel+0x364>
  if ((sConfig->DAC_UserTrimming) == DAC_TRIMMING_USER)
  {
    assert_param(IS_DAC_TRIMMINGVALUE(sConfig->DAC_TrimmingValue));
  }
  assert_param(IS_DAC_SAMPLEANDHOLD(sConfig->DAC_SampleAndHold));
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	689b      	ldr	r3, [r3, #8]
 8000f1c:	2b04      	cmp	r3, #4
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	795b      	ldrb	r3, [r3, #5]
 8000f22:	2b01      	cmp	r3, #1
 8000f24:	d101      	bne.n	8000f2a <HAL_DAC_ConfigChannel+0x32>
 8000f26:	2302      	movs	r3, #2
 8000f28:	e198      	b.n	800125c <HAL_DAC_ConfigChannel+0x364>
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	2202      	movs	r2, #2
 8000f34:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8000f36:	68bb      	ldr	r3, [r7, #8]
 8000f38:	689b      	ldr	r3, [r3, #8]
 8000f3a:	2b04      	cmp	r3, #4
 8000f3c:	d17a      	bne.n	8001034 <HAL_DAC_ConfigChannel+0x13c>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8000f3e:	f7ff fdab 	bl	8000a98 <HAL_GetTick>
 8000f42:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d13d      	bne.n	8000fc6 <HAL_DAC_ConfigChannel+0xce>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8000f4a:	e018      	b.n	8000f7e <HAL_DAC_ConfigChannel+0x86>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8000f4c:	f7ff fda4 	bl	8000a98 <HAL_GetTick>
 8000f50:	4602      	mov	r2, r0
 8000f52:	69bb      	ldr	r3, [r7, #24]
 8000f54:	1ad3      	subs	r3, r2, r3
 8000f56:	2b01      	cmp	r3, #1
 8000f58:	d911      	bls.n	8000f7e <HAL_DAC_ConfigChannel+0x86>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f60:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d00a      	beq.n	8000f7e <HAL_DAC_ConfigChannel+0x86>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	691b      	ldr	r3, [r3, #16]
 8000f6c:	f043 0208 	orr.w	r2, r3, #8
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	2203      	movs	r2, #3
 8000f78:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8000f7a:	2303      	movs	r3, #3
 8000f7c:	e16e      	b.n	800125c <HAL_DAC_ConfigChannel+0x364>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f84:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d1df      	bne.n	8000f4c <HAL_DAC_ConfigChannel+0x54>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	68ba      	ldr	r2, [r7, #8]
 8000f92:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8000f94:	641a      	str	r2, [r3, #64]	@ 0x40
 8000f96:	e020      	b.n	8000fda <HAL_DAC_ConfigChannel+0xe2>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8000f98:	f7ff fd7e 	bl	8000a98 <HAL_GetTick>
 8000f9c:	4602      	mov	r2, r0
 8000f9e:	69bb      	ldr	r3, [r7, #24]
 8000fa0:	1ad3      	subs	r3, r2, r3
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d90f      	bls.n	8000fc6 <HAL_DAC_ConfigChannel+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	da0a      	bge.n	8000fc6 <HAL_DAC_ConfigChannel+0xce>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	691b      	ldr	r3, [r3, #16]
 8000fb4:	f043 0208 	orr.w	r2, r3, #8
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	2203      	movs	r2, #3
 8000fc0:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8000fc2:	2303      	movs	r3, #3
 8000fc4:	e14a      	b.n	800125c <HAL_DAC_ConfigChannel+0x364>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	dbe3      	blt.n	8000f98 <HAL_DAC_ConfigChannel+0xa0>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	68ba      	ldr	r2, [r7, #8]
 8000fd6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8000fd8:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	f003 0310 	and.w	r3, r3, #16
 8000fe6:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8000fea:	fa01 f303 	lsl.w	r3, r1, r3
 8000fee:	43db      	mvns	r3, r3
 8000ff0:	ea02 0103 	and.w	r1, r2, r3
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	f003 0310 	and.w	r3, r3, #16
 8000ffe:	409a      	lsls	r2, r3
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	430a      	orrs	r2, r1
 8001006:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	f003 0310 	and.w	r3, r3, #16
 8001014:	21ff      	movs	r1, #255	@ 0xff
 8001016:	fa01 f303 	lsl.w	r3, r1, r3
 800101a:	43db      	mvns	r3, r3
 800101c:	ea02 0103 	and.w	r1, r2, r3
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	f003 0310 	and.w	r3, r3, #16
 800102a:	409a      	lsls	r2, r3
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	430a      	orrs	r2, r1
 8001032:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	69db      	ldr	r3, [r3, #28]
 8001038:	2b01      	cmp	r3, #1
 800103a:	d11d      	bne.n	8001078 <HAL_DAC_ConfigChannel+0x180>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001042:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	f003 0310 	and.w	r3, r3, #16
 800104a:	221f      	movs	r2, #31
 800104c:	fa02 f303 	lsl.w	r3, r2, r3
 8001050:	43db      	mvns	r3, r3
 8001052:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001054:	4013      	ands	r3, r2
 8001056:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	6a1b      	ldr	r3, [r3, #32]
 800105c:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	f003 0310 	and.w	r3, r3, #16
 8001064:	697a      	ldr	r2, [r7, #20]
 8001066:	fa02 f303 	lsl.w	r3, r2, r3
 800106a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800106c:	4313      	orrs	r3, r2
 800106e:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001076:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800107e:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	f003 0310 	and.w	r3, r3, #16
 8001086:	2207      	movs	r2, #7
 8001088:	fa02 f303 	lsl.w	r3, r2, r3
 800108c:	43db      	mvns	r3, r3
 800108e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001090:	4013      	ands	r3, r2
 8001092:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	699b      	ldr	r3, [r3, #24]
 8001098:	2b01      	cmp	r3, #1
 800109a:	d102      	bne.n	80010a2 <HAL_DAC_ConfigChannel+0x1aa>
  {
    connectOnChip = 0x00000000UL;
 800109c:	2300      	movs	r3, #0
 800109e:	623b      	str	r3, [r7, #32]
 80010a0:	e00f      	b.n	80010c2 <HAL_DAC_ConfigChannel+0x1ca>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80010a2:	68bb      	ldr	r3, [r7, #8]
 80010a4:	699b      	ldr	r3, [r3, #24]
 80010a6:	2b02      	cmp	r3, #2
 80010a8:	d102      	bne.n	80010b0 <HAL_DAC_ConfigChannel+0x1b8>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80010aa:	2301      	movs	r3, #1
 80010ac:	623b      	str	r3, [r7, #32]
 80010ae:	e008      	b.n	80010c2 <HAL_DAC_ConfigChannel+0x1ca>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	695b      	ldr	r3, [r3, #20]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d102      	bne.n	80010be <HAL_DAC_ConfigChannel+0x1c6>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80010b8:	2301      	movs	r3, #1
 80010ba:	623b      	str	r3, [r7, #32]
 80010bc:	e001      	b.n	80010c2 <HAL_DAC_ConfigChannel+0x1ca>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80010be:	2300      	movs	r3, #0
 80010c0:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80010c2:	68bb      	ldr	r3, [r7, #8]
 80010c4:	689a      	ldr	r2, [r3, #8]
 80010c6:	68bb      	ldr	r3, [r7, #8]
 80010c8:	695b      	ldr	r3, [r3, #20]
 80010ca:	4313      	orrs	r3, r2
 80010cc:	6a3a      	ldr	r2, [r7, #32]
 80010ce:	4313      	orrs	r3, r2
 80010d0:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	f003 0310 	and.w	r3, r3, #16
 80010d8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	43db      	mvns	r3, r3
 80010e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80010e4:	4013      	ands	r3, r2
 80010e6:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	791b      	ldrb	r3, [r3, #4]
 80010ec:	2b01      	cmp	r3, #1
 80010ee:	d102      	bne.n	80010f6 <HAL_DAC_ConfigChannel+0x1fe>
 80010f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010f4:	e000      	b.n	80010f8 <HAL_DAC_ConfigChannel+0x200>
 80010f6:	2300      	movs	r3, #0
 80010f8:	697a      	ldr	r2, [r7, #20]
 80010fa:	4313      	orrs	r3, r2
 80010fc:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	f003 0310 	and.w	r3, r3, #16
 8001104:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	43db      	mvns	r3, r3
 800110e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001110:	4013      	ands	r3, r2
 8001112:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	795b      	ldrb	r3, [r3, #5]
 8001118:	2b01      	cmp	r3, #1
 800111a:	d102      	bne.n	8001122 <HAL_DAC_ConfigChannel+0x22a>
 800111c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001120:	e000      	b.n	8001124 <HAL_DAC_ConfigChannel+0x22c>
 8001122:	2300      	movs	r3, #0
 8001124:	697a      	ldr	r2, [r7, #20]
 8001126:	4313      	orrs	r3, r2
 8001128:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 800112a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800112c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001130:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8001132:	68bb      	ldr	r3, [r7, #8]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	2b02      	cmp	r3, #2
 8001138:	d114      	bne.n	8001164 <HAL_DAC_ConfigChannel+0x26c>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 800113a:	f001 fa79 	bl	8002630 <HAL_RCC_GetHCLKFreq>
 800113e:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	4a48      	ldr	r2, [pc, #288]	@ (8001264 <HAL_DAC_ConfigChannel+0x36c>)
 8001144:	4293      	cmp	r3, r2
 8001146:	d904      	bls.n	8001152 <HAL_DAC_ConfigChannel+0x25a>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8001148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800114a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800114e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001150:	e00f      	b.n	8001172 <HAL_DAC_ConfigChannel+0x27a>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	4a44      	ldr	r2, [pc, #272]	@ (8001268 <HAL_DAC_ConfigChannel+0x370>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d90a      	bls.n	8001170 <HAL_DAC_ConfigChannel+0x278>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 800115a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800115c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001160:	627b      	str	r3, [r7, #36]	@ 0x24
 8001162:	e006      	b.n	8001172 <HAL_DAC_ConfigChannel+0x27a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800116a:	4313      	orrs	r3, r2
 800116c:	627b      	str	r3, [r7, #36]	@ 0x24
 800116e:	e000      	b.n	8001172 <HAL_DAC_ConfigChannel+0x27a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8001170:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	f003 0310 	and.w	r3, r3, #16
 8001178:	697a      	ldr	r2, [r7, #20]
 800117a:	fa02 f303 	lsl.w	r3, r2, r3
 800117e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001180:	4313      	orrs	r3, r2
 8001182:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800118a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	6819      	ldr	r1, [r3, #0]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	f003 0310 	and.w	r3, r3, #16
 8001198:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	43da      	mvns	r2, r3
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	400a      	ands	r2, r1
 80011a8:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	f003 0310 	and.w	r3, r3, #16
 80011b8:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	43db      	mvns	r3, r3
 80011c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80011c4:	4013      	ands	r3, r2
 80011c6:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	f003 0310 	and.w	r3, r3, #16
 80011d4:	697a      	ldr	r2, [r7, #20]
 80011d6:	fa02 f303 	lsl.w	r3, r2, r3
 80011da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80011dc:	4313      	orrs	r3, r2
 80011de:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80011e6:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	6819      	ldr	r1, [r3, #0]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	f003 0310 	and.w	r3, r3, #16
 80011f4:	22c0      	movs	r2, #192	@ 0xc0
 80011f6:	fa02 f303 	lsl.w	r3, r2, r3
 80011fa:	43da      	mvns	r2, r3
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	400a      	ands	r2, r1
 8001202:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	68db      	ldr	r3, [r3, #12]
 8001208:	089b      	lsrs	r3, r3, #2
 800120a:	f003 030f 	and.w	r3, r3, #15
 800120e:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	691b      	ldr	r3, [r3, #16]
 8001214:	089b      	lsrs	r3, r3, #2
 8001216:	021b      	lsls	r3, r3, #8
 8001218:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800121c:	697a      	ldr	r2, [r7, #20]
 800121e:	4313      	orrs	r3, r2
 8001220:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	f003 0310 	and.w	r3, r3, #16
 800122e:	f640 710f 	movw	r1, #3855	@ 0xf0f
 8001232:	fa01 f303 	lsl.w	r3, r1, r3
 8001236:	43db      	mvns	r3, r3
 8001238:	ea02 0103 	and.w	r1, r2, r3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	f003 0310 	and.w	r3, r3, #16
 8001242:	697a      	ldr	r2, [r7, #20]
 8001244:	409a      	lsls	r2, r3
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	430a      	orrs	r2, r1
 800124c:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	2201      	movs	r2, #1
 8001252:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	2200      	movs	r2, #0
 8001258:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 800125a:	7ffb      	ldrb	r3, [r7, #31]
}
 800125c:	4618      	mov	r0, r3
 800125e:	3728      	adds	r7, #40	@ 0x28
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	09896800 	.word	0x09896800
 8001268:	04c4b400 	.word	0x04c4b400

0800126c <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001278:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800127a:	68f8      	ldr	r0, [r7, #12]
 800127c:	f7ff fe1e 	bl	8000ebc <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	2201      	movs	r2, #1
 8001284:	711a      	strb	r2, [r3, #4]
}
 8001286:	bf00      	nop
 8001288:	3710      	adds	r7, #16
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}

0800128e <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800128e:	b580      	push	{r7, lr}
 8001290:	b084      	sub	sp, #16
 8001292:	af00      	add	r7, sp, #0
 8001294:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800129a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 800129c:	68f8      	ldr	r0, [r7, #12]
 800129e:	f7ff fe17 	bl	8000ed0 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80012a2:	bf00      	nop
 80012a4:	3710      	adds	r7, #16
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}

080012aa <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80012aa:	b580      	push	{r7, lr}
 80012ac:	b084      	sub	sp, #16
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012b6:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	691b      	ldr	r3, [r3, #16]
 80012bc:	f043 0204 	orr.w	r2, r3, #4
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80012c4:	68f8      	ldr	r0, [r7, #12]
 80012c6:	f7ff fe0d 	bl	8000ee4 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	2201      	movs	r2, #1
 80012ce:	711a      	strb	r2, [r3, #4]
}
 80012d0:	bf00      	nop
 80012d2:	3710      	adds	r7, #16
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80012e0:	bf00      	nop
 80012e2:	370c      	adds	r7, #12
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr

080012ec <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80012f4:	bf00      	nop
 80012f6:	370c      	adds	r7, #12
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr

08001300 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8001308:	bf00      	nop
 800130a:	370c      	adds	r7, #12
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr

08001314 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001320:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8001322:	68f8      	ldr	r0, [r7, #12]
 8001324:	f7ff ffd8 	bl	80012d8 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	2201      	movs	r2, #1
 800132c:	711a      	strb	r2, [r3, #4]
}
 800132e:	bf00      	nop
 8001330:	3710      	adds	r7, #16
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}

08001336 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001336:	b580      	push	{r7, lr}
 8001338:	b084      	sub	sp, #16
 800133a:	af00      	add	r7, sp, #0
 800133c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001342:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8001344:	68f8      	ldr	r0, [r7, #12]
 8001346:	f7ff ffd1 	bl	80012ec <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800134a:	bf00      	nop
 800134c:	3710      	adds	r7, #16
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}

08001352 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8001352:	b580      	push	{r7, lr}
 8001354:	b084      	sub	sp, #16
 8001356:	af00      	add	r7, sp, #0
 8001358:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800135e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	691b      	ldr	r3, [r3, #16]
 8001364:	f043 0204 	orr.w	r2, r3, #4
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800136c:	68f8      	ldr	r0, [r7, #12]
 800136e:	f7ff ffc7 	bl	8001300 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	2201      	movs	r2, #1
 8001376:	711a      	strb	r2, [r3, #4]
}
 8001378:	bf00      	nop
 800137a:	3710      	adds	r7, #16
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}

08001380 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d101      	bne.n	8001392 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	e08d      	b.n	80014ae <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	461a      	mov	r2, r3
 8001398:	4b47      	ldr	r3, [pc, #284]	@ (80014b8 <HAL_DMA_Init+0x138>)
 800139a:	429a      	cmp	r2, r3
 800139c:	d80f      	bhi.n	80013be <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	461a      	mov	r2, r3
 80013a4:	4b45      	ldr	r3, [pc, #276]	@ (80014bc <HAL_DMA_Init+0x13c>)
 80013a6:	4413      	add	r3, r2
 80013a8:	4a45      	ldr	r2, [pc, #276]	@ (80014c0 <HAL_DMA_Init+0x140>)
 80013aa:	fba2 2303 	umull	r2, r3, r2, r3
 80013ae:	091b      	lsrs	r3, r3, #4
 80013b0:	009a      	lsls	r2, r3, #2
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4a42      	ldr	r2, [pc, #264]	@ (80014c4 <HAL_DMA_Init+0x144>)
 80013ba:	641a      	str	r2, [r3, #64]	@ 0x40
 80013bc:	e00e      	b.n	80013dc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	461a      	mov	r2, r3
 80013c4:	4b40      	ldr	r3, [pc, #256]	@ (80014c8 <HAL_DMA_Init+0x148>)
 80013c6:	4413      	add	r3, r2
 80013c8:	4a3d      	ldr	r2, [pc, #244]	@ (80014c0 <HAL_DMA_Init+0x140>)
 80013ca:	fba2 2303 	umull	r2, r3, r2, r3
 80013ce:	091b      	lsrs	r3, r3, #4
 80013d0:	009a      	lsls	r2, r3, #2
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4a3c      	ldr	r2, [pc, #240]	@ (80014cc <HAL_DMA_Init+0x14c>)
 80013da:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2202      	movs	r2, #2
 80013e0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80013f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80013f6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001400:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	691b      	ldr	r3, [r3, #16]
 8001406:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800140c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	699b      	ldr	r3, [r3, #24]
 8001412:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001418:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6a1b      	ldr	r3, [r3, #32]
 800141e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001420:	68fa      	ldr	r2, [r7, #12]
 8001422:	4313      	orrs	r3, r2
 8001424:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	68fa      	ldr	r2, [r7, #12]
 800142c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800142e:	6878      	ldr	r0, [r7, #4]
 8001430:	f000 f9b6 	bl	80017a0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	689b      	ldr	r3, [r3, #8]
 8001438:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800143c:	d102      	bne.n	8001444 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2200      	movs	r2, #0
 8001442:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	685a      	ldr	r2, [r3, #4]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800144c:	b2d2      	uxtb	r2, r2
 800144e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001454:	687a      	ldr	r2, [r7, #4]
 8001456:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001458:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d010      	beq.n	8001484 <HAL_DMA_Init+0x104>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	2b04      	cmp	r3, #4
 8001468:	d80c      	bhi.n	8001484 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f000 f9d6 	bl	800181c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001474:	2200      	movs	r2, #0
 8001476:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800147c:	687a      	ldr	r2, [r7, #4]
 800147e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001480:	605a      	str	r2, [r3, #4]
 8001482:	e008      	b.n	8001496 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2200      	movs	r2, #0
 8001488:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2200      	movs	r2, #0
 800148e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2200      	movs	r2, #0
 8001494:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2200      	movs	r2, #0
 800149a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2201      	movs	r2, #1
 80014a0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2200      	movs	r2, #0
 80014a8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80014ac:	2300      	movs	r3, #0
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3710      	adds	r7, #16
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	40020407 	.word	0x40020407
 80014bc:	bffdfff8 	.word	0xbffdfff8
 80014c0:	cccccccd 	.word	0xcccccccd
 80014c4:	40020000 	.word	0x40020000
 80014c8:	bffdfbf8 	.word	0xbffdfbf8
 80014cc:	40020400 	.word	0x40020400

080014d0 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b086      	sub	sp, #24
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	60f8      	str	r0, [r7, #12]
 80014d8:	60b9      	str	r1, [r7, #8]
 80014da:	607a      	str	r2, [r7, #4]
 80014dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80014de:	2300      	movs	r3, #0
 80014e0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d101      	bne.n	80014f0 <HAL_DMA_Start_IT+0x20>
 80014ec:	2302      	movs	r3, #2
 80014ee:	e066      	b.n	80015be <HAL_DMA_Start_IT+0xee>
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	2201      	movs	r2, #1
 80014f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	2b01      	cmp	r3, #1
 8001502:	d155      	bne.n	80015b0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	2202      	movs	r2, #2
 8001508:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	2200      	movs	r2, #0
 8001510:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f022 0201 	bic.w	r2, r2, #1
 8001520:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	687a      	ldr	r2, [r7, #4]
 8001526:	68b9      	ldr	r1, [r7, #8]
 8001528:	68f8      	ldr	r0, [r7, #12]
 800152a:	f000 f8fb 	bl	8001724 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001532:	2b00      	cmp	r3, #0
 8001534:	d008      	beq.n	8001548 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f042 020e 	orr.w	r2, r2, #14
 8001544:	601a      	str	r2, [r3, #0]
 8001546:	e00f      	b.n	8001568 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f022 0204 	bic.w	r2, r2, #4
 8001556:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f042 020a 	orr.w	r2, r2, #10
 8001566:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001572:	2b00      	cmp	r3, #0
 8001574:	d007      	beq.n	8001586 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001580:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001584:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800158a:	2b00      	cmp	r3, #0
 800158c:	d007      	beq.n	800159e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001598:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800159c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f042 0201 	orr.w	r2, r2, #1
 80015ac:	601a      	str	r2, [r3, #0]
 80015ae:	e005      	b.n	80015bc <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	2200      	movs	r2, #0
 80015b4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80015b8:	2302      	movs	r3, #2
 80015ba:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80015bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3718      	adds	r7, #24
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}

080015c6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80015c6:	b580      	push	{r7, lr}
 80015c8:	b084      	sub	sp, #16
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015e2:	f003 031f 	and.w	r3, r3, #31
 80015e6:	2204      	movs	r2, #4
 80015e8:	409a      	lsls	r2, r3
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	4013      	ands	r3, r2
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d026      	beq.n	8001640 <HAL_DMA_IRQHandler+0x7a>
 80015f2:	68bb      	ldr	r3, [r7, #8]
 80015f4:	f003 0304 	and.w	r3, r3, #4
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d021      	beq.n	8001640 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 0320 	and.w	r3, r3, #32
 8001606:	2b00      	cmp	r3, #0
 8001608:	d107      	bne.n	800161a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f022 0204 	bic.w	r2, r2, #4
 8001618:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800161e:	f003 021f 	and.w	r2, r3, #31
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001626:	2104      	movs	r1, #4
 8001628:	fa01 f202 	lsl.w	r2, r1, r2
 800162c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001632:	2b00      	cmp	r3, #0
 8001634:	d071      	beq.n	800171a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800163e:	e06c      	b.n	800171a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001644:	f003 031f 	and.w	r3, r3, #31
 8001648:	2202      	movs	r2, #2
 800164a:	409a      	lsls	r2, r3
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	4013      	ands	r3, r2
 8001650:	2b00      	cmp	r3, #0
 8001652:	d02e      	beq.n	80016b2 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	f003 0302 	and.w	r3, r3, #2
 800165a:	2b00      	cmp	r3, #0
 800165c:	d029      	beq.n	80016b2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f003 0320 	and.w	r3, r3, #32
 8001668:	2b00      	cmp	r3, #0
 800166a:	d10b      	bne.n	8001684 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f022 020a 	bic.w	r2, r2, #10
 800167a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2201      	movs	r2, #1
 8001680:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001688:	f003 021f 	and.w	r2, r3, #31
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001690:	2102      	movs	r1, #2
 8001692:	fa01 f202 	lsl.w	r2, r1, r2
 8001696:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2200      	movs	r2, #0
 800169c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d038      	beq.n	800171a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016ac:	6878      	ldr	r0, [r7, #4]
 80016ae:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80016b0:	e033      	b.n	800171a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016b6:	f003 031f 	and.w	r3, r3, #31
 80016ba:	2208      	movs	r2, #8
 80016bc:	409a      	lsls	r2, r3
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	4013      	ands	r3, r2
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d02a      	beq.n	800171c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	f003 0308 	and.w	r3, r3, #8
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d025      	beq.n	800171c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f022 020e 	bic.w	r2, r2, #14
 80016de:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016e4:	f003 021f 	and.w	r2, r3, #31
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ec:	2101      	movs	r1, #1
 80016ee:	fa01 f202 	lsl.w	r2, r1, r2
 80016f2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2201      	movs	r2, #1
 80016f8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2201      	movs	r2, #1
 80016fe:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2200      	movs	r2, #0
 8001706:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800170e:	2b00      	cmp	r3, #0
 8001710:	d004      	beq.n	800171c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800171a:	bf00      	nop
 800171c:	bf00      	nop
}
 800171e:	3710      	adds	r7, #16
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}

08001724 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001724:	b480      	push	{r7}
 8001726:	b085      	sub	sp, #20
 8001728:	af00      	add	r7, sp, #0
 800172a:	60f8      	str	r0, [r7, #12]
 800172c:	60b9      	str	r1, [r7, #8]
 800172e:	607a      	str	r2, [r7, #4]
 8001730:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001736:	68fa      	ldr	r2, [r7, #12]
 8001738:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800173a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001740:	2b00      	cmp	r3, #0
 8001742:	d004      	beq.n	800174e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001748:	68fa      	ldr	r2, [r7, #12]
 800174a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800174c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001752:	f003 021f 	and.w	r2, r3, #31
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800175a:	2101      	movs	r1, #1
 800175c:	fa01 f202 	lsl.w	r2, r1, r2
 8001760:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	683a      	ldr	r2, [r7, #0]
 8001768:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	2b10      	cmp	r3, #16
 8001770:	d108      	bne.n	8001784 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	687a      	ldr	r2, [r7, #4]
 8001778:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	68ba      	ldr	r2, [r7, #8]
 8001780:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001782:	e007      	b.n	8001794 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	68ba      	ldr	r2, [r7, #8]
 800178a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	687a      	ldr	r2, [r7, #4]
 8001792:	60da      	str	r2, [r3, #12]
}
 8001794:	bf00      	nop
 8001796:	3714      	adds	r7, #20
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr

080017a0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b087      	sub	sp, #28
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	461a      	mov	r2, r3
 80017ae:	4b16      	ldr	r3, [pc, #88]	@ (8001808 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d802      	bhi.n	80017ba <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80017b4:	4b15      	ldr	r3, [pc, #84]	@ (800180c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80017b6:	617b      	str	r3, [r7, #20]
 80017b8:	e001      	b.n	80017be <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80017ba:	4b15      	ldr	r3, [pc, #84]	@ (8001810 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80017bc:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	3b08      	subs	r3, #8
 80017ca:	4a12      	ldr	r2, [pc, #72]	@ (8001814 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80017cc:	fba2 2303 	umull	r2, r3, r2, r3
 80017d0:	091b      	lsrs	r3, r3, #4
 80017d2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017d8:	089b      	lsrs	r3, r3, #2
 80017da:	009a      	lsls	r2, r3, #2
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	4413      	add	r3, r2
 80017e0:	461a      	mov	r2, r3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4a0b      	ldr	r2, [pc, #44]	@ (8001818 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80017ea:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	f003 031f 	and.w	r3, r3, #31
 80017f2:	2201      	movs	r2, #1
 80017f4:	409a      	lsls	r2, r3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80017fa:	bf00      	nop
 80017fc:	371c      	adds	r7, #28
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	40020407 	.word	0x40020407
 800180c:	40020800 	.word	0x40020800
 8001810:	40020820 	.word	0x40020820
 8001814:	cccccccd 	.word	0xcccccccd
 8001818:	40020880 	.word	0x40020880

0800181c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800181c:	b480      	push	{r7}
 800181e:	b085      	sub	sp, #20
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	b2db      	uxtb	r3, r3
 800182a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800182c:	68fa      	ldr	r2, [r7, #12]
 800182e:	4b0b      	ldr	r3, [pc, #44]	@ (800185c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001830:	4413      	add	r3, r2
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	461a      	mov	r2, r3
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	4a08      	ldr	r2, [pc, #32]	@ (8001860 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800183e:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	3b01      	subs	r3, #1
 8001844:	f003 031f 	and.w	r3, r3, #31
 8001848:	2201      	movs	r2, #1
 800184a:	409a      	lsls	r2, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8001850:	bf00      	nop
 8001852:	3714      	adds	r7, #20
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr
 800185c:	1000823f 	.word	0x1000823f
 8001860:	40020940 	.word	0x40020940

08001864 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001864:	b480      	push	{r7}
 8001866:	b087      	sub	sp, #28
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800186e:	2300      	movs	r3, #0
 8001870:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001872:	e15a      	b.n	8001b2a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	2101      	movs	r1, #1
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	fa01 f303 	lsl.w	r3, r1, r3
 8001880:	4013      	ands	r3, r2
 8001882:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	2b00      	cmp	r3, #0
 8001888:	f000 814c 	beq.w	8001b24 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f003 0303 	and.w	r3, r3, #3
 8001894:	2b01      	cmp	r3, #1
 8001896:	d005      	beq.n	80018a4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80018a0:	2b02      	cmp	r3, #2
 80018a2:	d130      	bne.n	8001906 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	005b      	lsls	r3, r3, #1
 80018ae:	2203      	movs	r2, #3
 80018b0:	fa02 f303 	lsl.w	r3, r2, r3
 80018b4:	43db      	mvns	r3, r3
 80018b6:	693a      	ldr	r2, [r7, #16]
 80018b8:	4013      	ands	r3, r2
 80018ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	68da      	ldr	r2, [r3, #12]
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	005b      	lsls	r3, r3, #1
 80018c4:	fa02 f303 	lsl.w	r3, r2, r3
 80018c8:	693a      	ldr	r2, [r7, #16]
 80018ca:	4313      	orrs	r3, r2
 80018cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	693a      	ldr	r2, [r7, #16]
 80018d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80018da:	2201      	movs	r2, #1
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	fa02 f303 	lsl.w	r3, r2, r3
 80018e2:	43db      	mvns	r3, r3
 80018e4:	693a      	ldr	r2, [r7, #16]
 80018e6:	4013      	ands	r3, r2
 80018e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	091b      	lsrs	r3, r3, #4
 80018f0:	f003 0201 	and.w	r2, r3, #1
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	fa02 f303 	lsl.w	r3, r2, r3
 80018fa:	693a      	ldr	r2, [r7, #16]
 80018fc:	4313      	orrs	r3, r2
 80018fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	693a      	ldr	r2, [r7, #16]
 8001904:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	f003 0303 	and.w	r3, r3, #3
 800190e:	2b03      	cmp	r3, #3
 8001910:	d017      	beq.n	8001942 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	68db      	ldr	r3, [r3, #12]
 8001916:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	005b      	lsls	r3, r3, #1
 800191c:	2203      	movs	r2, #3
 800191e:	fa02 f303 	lsl.w	r3, r2, r3
 8001922:	43db      	mvns	r3, r3
 8001924:	693a      	ldr	r2, [r7, #16]
 8001926:	4013      	ands	r3, r2
 8001928:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	689a      	ldr	r2, [r3, #8]
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	005b      	lsls	r3, r3, #1
 8001932:	fa02 f303 	lsl.w	r3, r2, r3
 8001936:	693a      	ldr	r2, [r7, #16]
 8001938:	4313      	orrs	r3, r2
 800193a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	693a      	ldr	r2, [r7, #16]
 8001940:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	f003 0303 	and.w	r3, r3, #3
 800194a:	2b02      	cmp	r3, #2
 800194c:	d123      	bne.n	8001996 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	08da      	lsrs	r2, r3, #3
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	3208      	adds	r2, #8
 8001956:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800195a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	f003 0307 	and.w	r3, r3, #7
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	220f      	movs	r2, #15
 8001966:	fa02 f303 	lsl.w	r3, r2, r3
 800196a:	43db      	mvns	r3, r3
 800196c:	693a      	ldr	r2, [r7, #16]
 800196e:	4013      	ands	r3, r2
 8001970:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	691a      	ldr	r2, [r3, #16]
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	f003 0307 	and.w	r3, r3, #7
 800197c:	009b      	lsls	r3, r3, #2
 800197e:	fa02 f303 	lsl.w	r3, r2, r3
 8001982:	693a      	ldr	r2, [r7, #16]
 8001984:	4313      	orrs	r3, r2
 8001986:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	08da      	lsrs	r2, r3, #3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	3208      	adds	r2, #8
 8001990:	6939      	ldr	r1, [r7, #16]
 8001992:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	005b      	lsls	r3, r3, #1
 80019a0:	2203      	movs	r2, #3
 80019a2:	fa02 f303 	lsl.w	r3, r2, r3
 80019a6:	43db      	mvns	r3, r3
 80019a8:	693a      	ldr	r2, [r7, #16]
 80019aa:	4013      	ands	r3, r2
 80019ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	f003 0203 	and.w	r2, r3, #3
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	005b      	lsls	r3, r3, #1
 80019ba:	fa02 f303 	lsl.w	r3, r2, r3
 80019be:	693a      	ldr	r2, [r7, #16]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	693a      	ldr	r2, [r7, #16]
 80019c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	f000 80a6 	beq.w	8001b24 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019d8:	4b5b      	ldr	r3, [pc, #364]	@ (8001b48 <HAL_GPIO_Init+0x2e4>)
 80019da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019dc:	4a5a      	ldr	r2, [pc, #360]	@ (8001b48 <HAL_GPIO_Init+0x2e4>)
 80019de:	f043 0301 	orr.w	r3, r3, #1
 80019e2:	6613      	str	r3, [r2, #96]	@ 0x60
 80019e4:	4b58      	ldr	r3, [pc, #352]	@ (8001b48 <HAL_GPIO_Init+0x2e4>)
 80019e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019e8:	f003 0301 	and.w	r3, r3, #1
 80019ec:	60bb      	str	r3, [r7, #8]
 80019ee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019f0:	4a56      	ldr	r2, [pc, #344]	@ (8001b4c <HAL_GPIO_Init+0x2e8>)
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	089b      	lsrs	r3, r3, #2
 80019f6:	3302      	adds	r3, #2
 80019f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	f003 0303 	and.w	r3, r3, #3
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	220f      	movs	r2, #15
 8001a08:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0c:	43db      	mvns	r3, r3
 8001a0e:	693a      	ldr	r2, [r7, #16]
 8001a10:	4013      	ands	r3, r2
 8001a12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001a1a:	d01f      	beq.n	8001a5c <HAL_GPIO_Init+0x1f8>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	4a4c      	ldr	r2, [pc, #304]	@ (8001b50 <HAL_GPIO_Init+0x2ec>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d019      	beq.n	8001a58 <HAL_GPIO_Init+0x1f4>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	4a4b      	ldr	r2, [pc, #300]	@ (8001b54 <HAL_GPIO_Init+0x2f0>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d013      	beq.n	8001a54 <HAL_GPIO_Init+0x1f0>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	4a4a      	ldr	r2, [pc, #296]	@ (8001b58 <HAL_GPIO_Init+0x2f4>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d00d      	beq.n	8001a50 <HAL_GPIO_Init+0x1ec>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	4a49      	ldr	r2, [pc, #292]	@ (8001b5c <HAL_GPIO_Init+0x2f8>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d007      	beq.n	8001a4c <HAL_GPIO_Init+0x1e8>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	4a48      	ldr	r2, [pc, #288]	@ (8001b60 <HAL_GPIO_Init+0x2fc>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d101      	bne.n	8001a48 <HAL_GPIO_Init+0x1e4>
 8001a44:	2305      	movs	r3, #5
 8001a46:	e00a      	b.n	8001a5e <HAL_GPIO_Init+0x1fa>
 8001a48:	2306      	movs	r3, #6
 8001a4a:	e008      	b.n	8001a5e <HAL_GPIO_Init+0x1fa>
 8001a4c:	2304      	movs	r3, #4
 8001a4e:	e006      	b.n	8001a5e <HAL_GPIO_Init+0x1fa>
 8001a50:	2303      	movs	r3, #3
 8001a52:	e004      	b.n	8001a5e <HAL_GPIO_Init+0x1fa>
 8001a54:	2302      	movs	r3, #2
 8001a56:	e002      	b.n	8001a5e <HAL_GPIO_Init+0x1fa>
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e000      	b.n	8001a5e <HAL_GPIO_Init+0x1fa>
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	697a      	ldr	r2, [r7, #20]
 8001a60:	f002 0203 	and.w	r2, r2, #3
 8001a64:	0092      	lsls	r2, r2, #2
 8001a66:	4093      	lsls	r3, r2
 8001a68:	693a      	ldr	r2, [r7, #16]
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a6e:	4937      	ldr	r1, [pc, #220]	@ (8001b4c <HAL_GPIO_Init+0x2e8>)
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	089b      	lsrs	r3, r3, #2
 8001a74:	3302      	adds	r3, #2
 8001a76:	693a      	ldr	r2, [r7, #16]
 8001a78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a7c:	4b39      	ldr	r3, [pc, #228]	@ (8001b64 <HAL_GPIO_Init+0x300>)
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	43db      	mvns	r3, r3
 8001a86:	693a      	ldr	r2, [r7, #16]
 8001a88:	4013      	ands	r3, r2
 8001a8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d003      	beq.n	8001aa0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001a98:	693a      	ldr	r2, [r7, #16]
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001aa0:	4a30      	ldr	r2, [pc, #192]	@ (8001b64 <HAL_GPIO_Init+0x300>)
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001aa6:	4b2f      	ldr	r3, [pc, #188]	@ (8001b64 <HAL_GPIO_Init+0x300>)
 8001aa8:	68db      	ldr	r3, [r3, #12]
 8001aaa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	43db      	mvns	r3, r3
 8001ab0:	693a      	ldr	r2, [r7, #16]
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d003      	beq.n	8001aca <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001ac2:	693a      	ldr	r2, [r7, #16]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001aca:	4a26      	ldr	r2, [pc, #152]	@ (8001b64 <HAL_GPIO_Init+0x300>)
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001ad0:	4b24      	ldr	r3, [pc, #144]	@ (8001b64 <HAL_GPIO_Init+0x300>)
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	43db      	mvns	r3, r3
 8001ada:	693a      	ldr	r2, [r7, #16]
 8001adc:	4013      	ands	r3, r2
 8001ade:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d003      	beq.n	8001af4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001aec:	693a      	ldr	r2, [r7, #16]
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001af4:	4a1b      	ldr	r2, [pc, #108]	@ (8001b64 <HAL_GPIO_Init+0x300>)
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001afa:	4b1a      	ldr	r3, [pc, #104]	@ (8001b64 <HAL_GPIO_Init+0x300>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	43db      	mvns	r3, r3
 8001b04:	693a      	ldr	r2, [r7, #16]
 8001b06:	4013      	ands	r3, r2
 8001b08:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d003      	beq.n	8001b1e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001b16:	693a      	ldr	r2, [r7, #16]
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b1e:	4a11      	ldr	r2, [pc, #68]	@ (8001b64 <HAL_GPIO_Init+0x300>)
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	3301      	adds	r3, #1
 8001b28:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	fa22 f303 	lsr.w	r3, r2, r3
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	f47f ae9d 	bne.w	8001874 <HAL_GPIO_Init+0x10>
  }
}
 8001b3a:	bf00      	nop
 8001b3c:	bf00      	nop
 8001b3e:	371c      	adds	r7, #28
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr
 8001b48:	40021000 	.word	0x40021000
 8001b4c:	40010000 	.word	0x40010000
 8001b50:	48000400 	.word	0x48000400
 8001b54:	48000800 	.word	0x48000800
 8001b58:	48000c00 	.word	0x48000c00
 8001b5c:	48001000 	.word	0x48001000
 8001b60:	48001400 	.word	0x48001400
 8001b64:	40010400 	.word	0x40010400

08001b68 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b085      	sub	sp, #20
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d141      	bne.n	8001bfa <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b76:	4b4b      	ldr	r3, [pc, #300]	@ (8001ca4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001b7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b82:	d131      	bne.n	8001be8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b84:	4b47      	ldr	r3, [pc, #284]	@ (8001ca4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001b8a:	4a46      	ldr	r2, [pc, #280]	@ (8001ca4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b8c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001b90:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b94:	4b43      	ldr	r3, [pc, #268]	@ (8001ca4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001b9c:	4a41      	ldr	r2, [pc, #260]	@ (8001ca4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b9e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ba2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001ba4:	4b40      	ldr	r3, [pc, #256]	@ (8001ca8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	2232      	movs	r2, #50	@ 0x32
 8001baa:	fb02 f303 	mul.w	r3, r2, r3
 8001bae:	4a3f      	ldr	r2, [pc, #252]	@ (8001cac <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001bb0:	fba2 2303 	umull	r2, r3, r2, r3
 8001bb4:	0c9b      	lsrs	r3, r3, #18
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001bba:	e002      	b.n	8001bc2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	3b01      	subs	r3, #1
 8001bc0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001bc2:	4b38      	ldr	r3, [pc, #224]	@ (8001ca4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bc4:	695b      	ldr	r3, [r3, #20]
 8001bc6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001bce:	d102      	bne.n	8001bd6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d1f2      	bne.n	8001bbc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001bd6:	4b33      	ldr	r3, [pc, #204]	@ (8001ca4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bd8:	695b      	ldr	r3, [r3, #20]
 8001bda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bde:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001be2:	d158      	bne.n	8001c96 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001be4:	2303      	movs	r3, #3
 8001be6:	e057      	b.n	8001c98 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001be8:	4b2e      	ldr	r3, [pc, #184]	@ (8001ca4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001bee:	4a2d      	ldr	r2, [pc, #180]	@ (8001ca4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bf0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001bf4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001bf8:	e04d      	b.n	8001c96 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001c00:	d141      	bne.n	8001c86 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001c02:	4b28      	ldr	r3, [pc, #160]	@ (8001ca4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001c0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c0e:	d131      	bne.n	8001c74 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c10:	4b24      	ldr	r3, [pc, #144]	@ (8001ca4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001c16:	4a23      	ldr	r2, [pc, #140]	@ (8001ca4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c1c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c20:	4b20      	ldr	r3, [pc, #128]	@ (8001ca4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001c28:	4a1e      	ldr	r2, [pc, #120]	@ (8001ca4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c2a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c2e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001c30:	4b1d      	ldr	r3, [pc, #116]	@ (8001ca8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	2232      	movs	r2, #50	@ 0x32
 8001c36:	fb02 f303 	mul.w	r3, r2, r3
 8001c3a:	4a1c      	ldr	r2, [pc, #112]	@ (8001cac <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001c3c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c40:	0c9b      	lsrs	r3, r3, #18
 8001c42:	3301      	adds	r3, #1
 8001c44:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c46:	e002      	b.n	8001c4e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	3b01      	subs	r3, #1
 8001c4c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c4e:	4b15      	ldr	r3, [pc, #84]	@ (8001ca4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c50:	695b      	ldr	r3, [r3, #20]
 8001c52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c5a:	d102      	bne.n	8001c62 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d1f2      	bne.n	8001c48 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c62:	4b10      	ldr	r3, [pc, #64]	@ (8001ca4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c64:	695b      	ldr	r3, [r3, #20]
 8001c66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c6e:	d112      	bne.n	8001c96 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001c70:	2303      	movs	r3, #3
 8001c72:	e011      	b.n	8001c98 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c74:	4b0b      	ldr	r3, [pc, #44]	@ (8001ca4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001c7a:	4a0a      	ldr	r2, [pc, #40]	@ (8001ca4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c80:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001c84:	e007      	b.n	8001c96 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c86:	4b07      	ldr	r3, [pc, #28]	@ (8001ca4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001c8e:	4a05      	ldr	r2, [pc, #20]	@ (8001ca4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c90:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c94:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001c96:	2300      	movs	r3, #0
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3714      	adds	r7, #20
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr
 8001ca4:	40007000 	.word	0x40007000
 8001ca8:	20000228 	.word	0x20000228
 8001cac:	431bde83 	.word	0x431bde83

08001cb0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001cb4:	4b05      	ldr	r3, [pc, #20]	@ (8001ccc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	4a04      	ldr	r2, [pc, #16]	@ (8001ccc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001cba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cbe:	6093      	str	r3, [r2, #8]
}
 8001cc0:	bf00      	nop
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	40007000 	.word	0x40007000

08001cd0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b088      	sub	sp, #32
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d101      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e2fe      	b.n	80022e0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0301 	and.w	r3, r3, #1
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d075      	beq.n	8001dda <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cee:	4b97      	ldr	r3, [pc, #604]	@ (8001f4c <HAL_RCC_OscConfig+0x27c>)
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	f003 030c 	and.w	r3, r3, #12
 8001cf6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001cf8:	4b94      	ldr	r3, [pc, #592]	@ (8001f4c <HAL_RCC_OscConfig+0x27c>)
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	f003 0303 	and.w	r3, r3, #3
 8001d00:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001d02:	69bb      	ldr	r3, [r7, #24]
 8001d04:	2b0c      	cmp	r3, #12
 8001d06:	d102      	bne.n	8001d0e <HAL_RCC_OscConfig+0x3e>
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	2b03      	cmp	r3, #3
 8001d0c:	d002      	beq.n	8001d14 <HAL_RCC_OscConfig+0x44>
 8001d0e:	69bb      	ldr	r3, [r7, #24]
 8001d10:	2b08      	cmp	r3, #8
 8001d12:	d10b      	bne.n	8001d2c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d14:	4b8d      	ldr	r3, [pc, #564]	@ (8001f4c <HAL_RCC_OscConfig+0x27c>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d05b      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x108>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d157      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e2d9      	b.n	80022e0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d34:	d106      	bne.n	8001d44 <HAL_RCC_OscConfig+0x74>
 8001d36:	4b85      	ldr	r3, [pc, #532]	@ (8001f4c <HAL_RCC_OscConfig+0x27c>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a84      	ldr	r2, [pc, #528]	@ (8001f4c <HAL_RCC_OscConfig+0x27c>)
 8001d3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d40:	6013      	str	r3, [r2, #0]
 8001d42:	e01d      	b.n	8001d80 <HAL_RCC_OscConfig+0xb0>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d4c:	d10c      	bne.n	8001d68 <HAL_RCC_OscConfig+0x98>
 8001d4e:	4b7f      	ldr	r3, [pc, #508]	@ (8001f4c <HAL_RCC_OscConfig+0x27c>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a7e      	ldr	r2, [pc, #504]	@ (8001f4c <HAL_RCC_OscConfig+0x27c>)
 8001d54:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d58:	6013      	str	r3, [r2, #0]
 8001d5a:	4b7c      	ldr	r3, [pc, #496]	@ (8001f4c <HAL_RCC_OscConfig+0x27c>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a7b      	ldr	r2, [pc, #492]	@ (8001f4c <HAL_RCC_OscConfig+0x27c>)
 8001d60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d64:	6013      	str	r3, [r2, #0]
 8001d66:	e00b      	b.n	8001d80 <HAL_RCC_OscConfig+0xb0>
 8001d68:	4b78      	ldr	r3, [pc, #480]	@ (8001f4c <HAL_RCC_OscConfig+0x27c>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a77      	ldr	r2, [pc, #476]	@ (8001f4c <HAL_RCC_OscConfig+0x27c>)
 8001d6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d72:	6013      	str	r3, [r2, #0]
 8001d74:	4b75      	ldr	r3, [pc, #468]	@ (8001f4c <HAL_RCC_OscConfig+0x27c>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a74      	ldr	r2, [pc, #464]	@ (8001f4c <HAL_RCC_OscConfig+0x27c>)
 8001d7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d013      	beq.n	8001db0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d88:	f7fe fe86 	bl	8000a98 <HAL_GetTick>
 8001d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d8e:	e008      	b.n	8001da2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d90:	f7fe fe82 	bl	8000a98 <HAL_GetTick>
 8001d94:	4602      	mov	r2, r0
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	2b64      	cmp	r3, #100	@ 0x64
 8001d9c:	d901      	bls.n	8001da2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	e29e      	b.n	80022e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001da2:	4b6a      	ldr	r3, [pc, #424]	@ (8001f4c <HAL_RCC_OscConfig+0x27c>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d0f0      	beq.n	8001d90 <HAL_RCC_OscConfig+0xc0>
 8001dae:	e014      	b.n	8001dda <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001db0:	f7fe fe72 	bl	8000a98 <HAL_GetTick>
 8001db4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001db6:	e008      	b.n	8001dca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001db8:	f7fe fe6e 	bl	8000a98 <HAL_GetTick>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	2b64      	cmp	r3, #100	@ 0x64
 8001dc4:	d901      	bls.n	8001dca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e28a      	b.n	80022e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001dca:	4b60      	ldr	r3, [pc, #384]	@ (8001f4c <HAL_RCC_OscConfig+0x27c>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d1f0      	bne.n	8001db8 <HAL_RCC_OscConfig+0xe8>
 8001dd6:	e000      	b.n	8001dda <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 0302 	and.w	r3, r3, #2
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d075      	beq.n	8001ed2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001de6:	4b59      	ldr	r3, [pc, #356]	@ (8001f4c <HAL_RCC_OscConfig+0x27c>)
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	f003 030c 	and.w	r3, r3, #12
 8001dee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001df0:	4b56      	ldr	r3, [pc, #344]	@ (8001f4c <HAL_RCC_OscConfig+0x27c>)
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	f003 0303 	and.w	r3, r3, #3
 8001df8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001dfa:	69bb      	ldr	r3, [r7, #24]
 8001dfc:	2b0c      	cmp	r3, #12
 8001dfe:	d102      	bne.n	8001e06 <HAL_RCC_OscConfig+0x136>
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d002      	beq.n	8001e0c <HAL_RCC_OscConfig+0x13c>
 8001e06:	69bb      	ldr	r3, [r7, #24]
 8001e08:	2b04      	cmp	r3, #4
 8001e0a:	d11f      	bne.n	8001e4c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e0c:	4b4f      	ldr	r3, [pc, #316]	@ (8001f4c <HAL_RCC_OscConfig+0x27c>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d005      	beq.n	8001e24 <HAL_RCC_OscConfig+0x154>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d101      	bne.n	8001e24 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e25d      	b.n	80022e0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e24:	4b49      	ldr	r3, [pc, #292]	@ (8001f4c <HAL_RCC_OscConfig+0x27c>)
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	691b      	ldr	r3, [r3, #16]
 8001e30:	061b      	lsls	r3, r3, #24
 8001e32:	4946      	ldr	r1, [pc, #280]	@ (8001f4c <HAL_RCC_OscConfig+0x27c>)
 8001e34:	4313      	orrs	r3, r2
 8001e36:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001e38:	4b45      	ldr	r3, [pc, #276]	@ (8001f50 <HAL_RCC_OscConfig+0x280>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7fe fddf 	bl	8000a00 <HAL_InitTick>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d043      	beq.n	8001ed0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e249      	b.n	80022e0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d023      	beq.n	8001e9c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e54:	4b3d      	ldr	r3, [pc, #244]	@ (8001f4c <HAL_RCC_OscConfig+0x27c>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a3c      	ldr	r2, [pc, #240]	@ (8001f4c <HAL_RCC_OscConfig+0x27c>)
 8001e5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e60:	f7fe fe1a 	bl	8000a98 <HAL_GetTick>
 8001e64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e66:	e008      	b.n	8001e7a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e68:	f7fe fe16 	bl	8000a98 <HAL_GetTick>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d901      	bls.n	8001e7a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001e76:	2303      	movs	r3, #3
 8001e78:	e232      	b.n	80022e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e7a:	4b34      	ldr	r3, [pc, #208]	@ (8001f4c <HAL_RCC_OscConfig+0x27c>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d0f0      	beq.n	8001e68 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e86:	4b31      	ldr	r3, [pc, #196]	@ (8001f4c <HAL_RCC_OscConfig+0x27c>)
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	691b      	ldr	r3, [r3, #16]
 8001e92:	061b      	lsls	r3, r3, #24
 8001e94:	492d      	ldr	r1, [pc, #180]	@ (8001f4c <HAL_RCC_OscConfig+0x27c>)
 8001e96:	4313      	orrs	r3, r2
 8001e98:	604b      	str	r3, [r1, #4]
 8001e9a:	e01a      	b.n	8001ed2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e9c:	4b2b      	ldr	r3, [pc, #172]	@ (8001f4c <HAL_RCC_OscConfig+0x27c>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a2a      	ldr	r2, [pc, #168]	@ (8001f4c <HAL_RCC_OscConfig+0x27c>)
 8001ea2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001ea6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ea8:	f7fe fdf6 	bl	8000a98 <HAL_GetTick>
 8001eac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001eae:	e008      	b.n	8001ec2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001eb0:	f7fe fdf2 	bl	8000a98 <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	2b02      	cmp	r3, #2
 8001ebc:	d901      	bls.n	8001ec2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e20e      	b.n	80022e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ec2:	4b22      	ldr	r3, [pc, #136]	@ (8001f4c <HAL_RCC_OscConfig+0x27c>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d1f0      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x1e0>
 8001ece:	e000      	b.n	8001ed2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ed0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0308 	and.w	r3, r3, #8
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d041      	beq.n	8001f62 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	695b      	ldr	r3, [r3, #20]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d01c      	beq.n	8001f20 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ee6:	4b19      	ldr	r3, [pc, #100]	@ (8001f4c <HAL_RCC_OscConfig+0x27c>)
 8001ee8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001eec:	4a17      	ldr	r2, [pc, #92]	@ (8001f4c <HAL_RCC_OscConfig+0x27c>)
 8001eee:	f043 0301 	orr.w	r3, r3, #1
 8001ef2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ef6:	f7fe fdcf 	bl	8000a98 <HAL_GetTick>
 8001efa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001efc:	e008      	b.n	8001f10 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001efe:	f7fe fdcb 	bl	8000a98 <HAL_GetTick>
 8001f02:	4602      	mov	r2, r0
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	2b02      	cmp	r3, #2
 8001f0a:	d901      	bls.n	8001f10 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	e1e7      	b.n	80022e0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f10:	4b0e      	ldr	r3, [pc, #56]	@ (8001f4c <HAL_RCC_OscConfig+0x27c>)
 8001f12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f16:	f003 0302 	and.w	r3, r3, #2
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d0ef      	beq.n	8001efe <HAL_RCC_OscConfig+0x22e>
 8001f1e:	e020      	b.n	8001f62 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f20:	4b0a      	ldr	r3, [pc, #40]	@ (8001f4c <HAL_RCC_OscConfig+0x27c>)
 8001f22:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f26:	4a09      	ldr	r2, [pc, #36]	@ (8001f4c <HAL_RCC_OscConfig+0x27c>)
 8001f28:	f023 0301 	bic.w	r3, r3, #1
 8001f2c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f30:	f7fe fdb2 	bl	8000a98 <HAL_GetTick>
 8001f34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f36:	e00d      	b.n	8001f54 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f38:	f7fe fdae 	bl	8000a98 <HAL_GetTick>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d906      	bls.n	8001f54 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001f46:	2303      	movs	r3, #3
 8001f48:	e1ca      	b.n	80022e0 <HAL_RCC_OscConfig+0x610>
 8001f4a:	bf00      	nop
 8001f4c:	40021000 	.word	0x40021000
 8001f50:	2000022c 	.word	0x2000022c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f54:	4b8c      	ldr	r3, [pc, #560]	@ (8002188 <HAL_RCC_OscConfig+0x4b8>)
 8001f56:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f5a:	f003 0302 	and.w	r3, r3, #2
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d1ea      	bne.n	8001f38 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0304 	and.w	r3, r3, #4
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	f000 80a6 	beq.w	80020bc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f70:	2300      	movs	r3, #0
 8001f72:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001f74:	4b84      	ldr	r3, [pc, #528]	@ (8002188 <HAL_RCC_OscConfig+0x4b8>)
 8001f76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d101      	bne.n	8001f84 <HAL_RCC_OscConfig+0x2b4>
 8001f80:	2301      	movs	r3, #1
 8001f82:	e000      	b.n	8001f86 <HAL_RCC_OscConfig+0x2b6>
 8001f84:	2300      	movs	r3, #0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d00d      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f8a:	4b7f      	ldr	r3, [pc, #508]	@ (8002188 <HAL_RCC_OscConfig+0x4b8>)
 8001f8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f8e:	4a7e      	ldr	r2, [pc, #504]	@ (8002188 <HAL_RCC_OscConfig+0x4b8>)
 8001f90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f94:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f96:	4b7c      	ldr	r3, [pc, #496]	@ (8002188 <HAL_RCC_OscConfig+0x4b8>)
 8001f98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f9e:	60fb      	str	r3, [r7, #12]
 8001fa0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fa6:	4b79      	ldr	r3, [pc, #484]	@ (800218c <HAL_RCC_OscConfig+0x4bc>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d118      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001fb2:	4b76      	ldr	r3, [pc, #472]	@ (800218c <HAL_RCC_OscConfig+0x4bc>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a75      	ldr	r2, [pc, #468]	@ (800218c <HAL_RCC_OscConfig+0x4bc>)
 8001fb8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fbe:	f7fe fd6b 	bl	8000a98 <HAL_GetTick>
 8001fc2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fc4:	e008      	b.n	8001fd8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fc6:	f7fe fd67 	bl	8000a98 <HAL_GetTick>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	2b02      	cmp	r3, #2
 8001fd2:	d901      	bls.n	8001fd8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	e183      	b.n	80022e0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fd8:	4b6c      	ldr	r3, [pc, #432]	@ (800218c <HAL_RCC_OscConfig+0x4bc>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d0f0      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d108      	bne.n	8001ffe <HAL_RCC_OscConfig+0x32e>
 8001fec:	4b66      	ldr	r3, [pc, #408]	@ (8002188 <HAL_RCC_OscConfig+0x4b8>)
 8001fee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ff2:	4a65      	ldr	r2, [pc, #404]	@ (8002188 <HAL_RCC_OscConfig+0x4b8>)
 8001ff4:	f043 0301 	orr.w	r3, r3, #1
 8001ff8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001ffc:	e024      	b.n	8002048 <HAL_RCC_OscConfig+0x378>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	2b05      	cmp	r3, #5
 8002004:	d110      	bne.n	8002028 <HAL_RCC_OscConfig+0x358>
 8002006:	4b60      	ldr	r3, [pc, #384]	@ (8002188 <HAL_RCC_OscConfig+0x4b8>)
 8002008:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800200c:	4a5e      	ldr	r2, [pc, #376]	@ (8002188 <HAL_RCC_OscConfig+0x4b8>)
 800200e:	f043 0304 	orr.w	r3, r3, #4
 8002012:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002016:	4b5c      	ldr	r3, [pc, #368]	@ (8002188 <HAL_RCC_OscConfig+0x4b8>)
 8002018:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800201c:	4a5a      	ldr	r2, [pc, #360]	@ (8002188 <HAL_RCC_OscConfig+0x4b8>)
 800201e:	f043 0301 	orr.w	r3, r3, #1
 8002022:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002026:	e00f      	b.n	8002048 <HAL_RCC_OscConfig+0x378>
 8002028:	4b57      	ldr	r3, [pc, #348]	@ (8002188 <HAL_RCC_OscConfig+0x4b8>)
 800202a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800202e:	4a56      	ldr	r2, [pc, #344]	@ (8002188 <HAL_RCC_OscConfig+0x4b8>)
 8002030:	f023 0301 	bic.w	r3, r3, #1
 8002034:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002038:	4b53      	ldr	r3, [pc, #332]	@ (8002188 <HAL_RCC_OscConfig+0x4b8>)
 800203a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800203e:	4a52      	ldr	r2, [pc, #328]	@ (8002188 <HAL_RCC_OscConfig+0x4b8>)
 8002040:	f023 0304 	bic.w	r3, r3, #4
 8002044:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d016      	beq.n	800207e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002050:	f7fe fd22 	bl	8000a98 <HAL_GetTick>
 8002054:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002056:	e00a      	b.n	800206e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002058:	f7fe fd1e 	bl	8000a98 <HAL_GetTick>
 800205c:	4602      	mov	r2, r0
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002066:	4293      	cmp	r3, r2
 8002068:	d901      	bls.n	800206e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e138      	b.n	80022e0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800206e:	4b46      	ldr	r3, [pc, #280]	@ (8002188 <HAL_RCC_OscConfig+0x4b8>)
 8002070:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002074:	f003 0302 	and.w	r3, r3, #2
 8002078:	2b00      	cmp	r3, #0
 800207a:	d0ed      	beq.n	8002058 <HAL_RCC_OscConfig+0x388>
 800207c:	e015      	b.n	80020aa <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800207e:	f7fe fd0b 	bl	8000a98 <HAL_GetTick>
 8002082:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002084:	e00a      	b.n	800209c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002086:	f7fe fd07 	bl	8000a98 <HAL_GetTick>
 800208a:	4602      	mov	r2, r0
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002094:	4293      	cmp	r3, r2
 8002096:	d901      	bls.n	800209c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002098:	2303      	movs	r3, #3
 800209a:	e121      	b.n	80022e0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800209c:	4b3a      	ldr	r3, [pc, #232]	@ (8002188 <HAL_RCC_OscConfig+0x4b8>)
 800209e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020a2:	f003 0302 	and.w	r3, r3, #2
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d1ed      	bne.n	8002086 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80020aa:	7ffb      	ldrb	r3, [r7, #31]
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d105      	bne.n	80020bc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020b0:	4b35      	ldr	r3, [pc, #212]	@ (8002188 <HAL_RCC_OscConfig+0x4b8>)
 80020b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020b4:	4a34      	ldr	r2, [pc, #208]	@ (8002188 <HAL_RCC_OscConfig+0x4b8>)
 80020b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80020ba:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 0320 	and.w	r3, r3, #32
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d03c      	beq.n	8002142 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	699b      	ldr	r3, [r3, #24]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d01c      	beq.n	800210a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80020d0:	4b2d      	ldr	r3, [pc, #180]	@ (8002188 <HAL_RCC_OscConfig+0x4b8>)
 80020d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80020d6:	4a2c      	ldr	r2, [pc, #176]	@ (8002188 <HAL_RCC_OscConfig+0x4b8>)
 80020d8:	f043 0301 	orr.w	r3, r3, #1
 80020dc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020e0:	f7fe fcda 	bl	8000a98 <HAL_GetTick>
 80020e4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80020e6:	e008      	b.n	80020fa <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020e8:	f7fe fcd6 	bl	8000a98 <HAL_GetTick>
 80020ec:	4602      	mov	r2, r0
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d901      	bls.n	80020fa <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80020f6:	2303      	movs	r3, #3
 80020f8:	e0f2      	b.n	80022e0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80020fa:	4b23      	ldr	r3, [pc, #140]	@ (8002188 <HAL_RCC_OscConfig+0x4b8>)
 80020fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002100:	f003 0302 	and.w	r3, r3, #2
 8002104:	2b00      	cmp	r3, #0
 8002106:	d0ef      	beq.n	80020e8 <HAL_RCC_OscConfig+0x418>
 8002108:	e01b      	b.n	8002142 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800210a:	4b1f      	ldr	r3, [pc, #124]	@ (8002188 <HAL_RCC_OscConfig+0x4b8>)
 800210c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002110:	4a1d      	ldr	r2, [pc, #116]	@ (8002188 <HAL_RCC_OscConfig+0x4b8>)
 8002112:	f023 0301 	bic.w	r3, r3, #1
 8002116:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800211a:	f7fe fcbd 	bl	8000a98 <HAL_GetTick>
 800211e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002120:	e008      	b.n	8002134 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002122:	f7fe fcb9 	bl	8000a98 <HAL_GetTick>
 8002126:	4602      	mov	r2, r0
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	1ad3      	subs	r3, r2, r3
 800212c:	2b02      	cmp	r3, #2
 800212e:	d901      	bls.n	8002134 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002130:	2303      	movs	r3, #3
 8002132:	e0d5      	b.n	80022e0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002134:	4b14      	ldr	r3, [pc, #80]	@ (8002188 <HAL_RCC_OscConfig+0x4b8>)
 8002136:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800213a:	f003 0302 	and.w	r3, r3, #2
 800213e:	2b00      	cmp	r3, #0
 8002140:	d1ef      	bne.n	8002122 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	69db      	ldr	r3, [r3, #28]
 8002146:	2b00      	cmp	r3, #0
 8002148:	f000 80c9 	beq.w	80022de <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800214c:	4b0e      	ldr	r3, [pc, #56]	@ (8002188 <HAL_RCC_OscConfig+0x4b8>)
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	f003 030c 	and.w	r3, r3, #12
 8002154:	2b0c      	cmp	r3, #12
 8002156:	f000 8083 	beq.w	8002260 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	69db      	ldr	r3, [r3, #28]
 800215e:	2b02      	cmp	r3, #2
 8002160:	d15e      	bne.n	8002220 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002162:	4b09      	ldr	r3, [pc, #36]	@ (8002188 <HAL_RCC_OscConfig+0x4b8>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a08      	ldr	r2, [pc, #32]	@ (8002188 <HAL_RCC_OscConfig+0x4b8>)
 8002168:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800216c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800216e:	f7fe fc93 	bl	8000a98 <HAL_GetTick>
 8002172:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002174:	e00c      	b.n	8002190 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002176:	f7fe fc8f 	bl	8000a98 <HAL_GetTick>
 800217a:	4602      	mov	r2, r0
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	1ad3      	subs	r3, r2, r3
 8002180:	2b02      	cmp	r3, #2
 8002182:	d905      	bls.n	8002190 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002184:	2303      	movs	r3, #3
 8002186:	e0ab      	b.n	80022e0 <HAL_RCC_OscConfig+0x610>
 8002188:	40021000 	.word	0x40021000
 800218c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002190:	4b55      	ldr	r3, [pc, #340]	@ (80022e8 <HAL_RCC_OscConfig+0x618>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002198:	2b00      	cmp	r3, #0
 800219a:	d1ec      	bne.n	8002176 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800219c:	4b52      	ldr	r3, [pc, #328]	@ (80022e8 <HAL_RCC_OscConfig+0x618>)
 800219e:	68da      	ldr	r2, [r3, #12]
 80021a0:	4b52      	ldr	r3, [pc, #328]	@ (80022ec <HAL_RCC_OscConfig+0x61c>)
 80021a2:	4013      	ands	r3, r2
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	6a11      	ldr	r1, [r2, #32]
 80021a8:	687a      	ldr	r2, [r7, #4]
 80021aa:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80021ac:	3a01      	subs	r2, #1
 80021ae:	0112      	lsls	r2, r2, #4
 80021b0:	4311      	orrs	r1, r2
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80021b6:	0212      	lsls	r2, r2, #8
 80021b8:	4311      	orrs	r1, r2
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80021be:	0852      	lsrs	r2, r2, #1
 80021c0:	3a01      	subs	r2, #1
 80021c2:	0552      	lsls	r2, r2, #21
 80021c4:	4311      	orrs	r1, r2
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80021ca:	0852      	lsrs	r2, r2, #1
 80021cc:	3a01      	subs	r2, #1
 80021ce:	0652      	lsls	r2, r2, #25
 80021d0:	4311      	orrs	r1, r2
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80021d6:	06d2      	lsls	r2, r2, #27
 80021d8:	430a      	orrs	r2, r1
 80021da:	4943      	ldr	r1, [pc, #268]	@ (80022e8 <HAL_RCC_OscConfig+0x618>)
 80021dc:	4313      	orrs	r3, r2
 80021de:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021e0:	4b41      	ldr	r3, [pc, #260]	@ (80022e8 <HAL_RCC_OscConfig+0x618>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a40      	ldr	r2, [pc, #256]	@ (80022e8 <HAL_RCC_OscConfig+0x618>)
 80021e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80021ea:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80021ec:	4b3e      	ldr	r3, [pc, #248]	@ (80022e8 <HAL_RCC_OscConfig+0x618>)
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	4a3d      	ldr	r2, [pc, #244]	@ (80022e8 <HAL_RCC_OscConfig+0x618>)
 80021f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80021f6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021f8:	f7fe fc4e 	bl	8000a98 <HAL_GetTick>
 80021fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021fe:	e008      	b.n	8002212 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002200:	f7fe fc4a 	bl	8000a98 <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	2b02      	cmp	r3, #2
 800220c:	d901      	bls.n	8002212 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e066      	b.n	80022e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002212:	4b35      	ldr	r3, [pc, #212]	@ (80022e8 <HAL_RCC_OscConfig+0x618>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d0f0      	beq.n	8002200 <HAL_RCC_OscConfig+0x530>
 800221e:	e05e      	b.n	80022de <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002220:	4b31      	ldr	r3, [pc, #196]	@ (80022e8 <HAL_RCC_OscConfig+0x618>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a30      	ldr	r2, [pc, #192]	@ (80022e8 <HAL_RCC_OscConfig+0x618>)
 8002226:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800222a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800222c:	f7fe fc34 	bl	8000a98 <HAL_GetTick>
 8002230:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002232:	e008      	b.n	8002246 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002234:	f7fe fc30 	bl	8000a98 <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	2b02      	cmp	r3, #2
 8002240:	d901      	bls.n	8002246 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002242:	2303      	movs	r3, #3
 8002244:	e04c      	b.n	80022e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002246:	4b28      	ldr	r3, [pc, #160]	@ (80022e8 <HAL_RCC_OscConfig+0x618>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d1f0      	bne.n	8002234 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002252:	4b25      	ldr	r3, [pc, #148]	@ (80022e8 <HAL_RCC_OscConfig+0x618>)
 8002254:	68da      	ldr	r2, [r3, #12]
 8002256:	4924      	ldr	r1, [pc, #144]	@ (80022e8 <HAL_RCC_OscConfig+0x618>)
 8002258:	4b25      	ldr	r3, [pc, #148]	@ (80022f0 <HAL_RCC_OscConfig+0x620>)
 800225a:	4013      	ands	r3, r2
 800225c:	60cb      	str	r3, [r1, #12]
 800225e:	e03e      	b.n	80022de <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	69db      	ldr	r3, [r3, #28]
 8002264:	2b01      	cmp	r3, #1
 8002266:	d101      	bne.n	800226c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e039      	b.n	80022e0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800226c:	4b1e      	ldr	r3, [pc, #120]	@ (80022e8 <HAL_RCC_OscConfig+0x618>)
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	f003 0203 	and.w	r2, r3, #3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6a1b      	ldr	r3, [r3, #32]
 800227c:	429a      	cmp	r2, r3
 800227e:	d12c      	bne.n	80022da <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800228a:	3b01      	subs	r3, #1
 800228c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800228e:	429a      	cmp	r2, r3
 8002290:	d123      	bne.n	80022da <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800229c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800229e:	429a      	cmp	r2, r3
 80022a0:	d11b      	bne.n	80022da <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022ac:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80022ae:	429a      	cmp	r2, r3
 80022b0:	d113      	bne.n	80022da <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022bc:	085b      	lsrs	r3, r3, #1
 80022be:	3b01      	subs	r3, #1
 80022c0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80022c2:	429a      	cmp	r2, r3
 80022c4:	d109      	bne.n	80022da <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022d0:	085b      	lsrs	r3, r3, #1
 80022d2:	3b01      	subs	r3, #1
 80022d4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d001      	beq.n	80022de <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e000      	b.n	80022e0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80022de:	2300      	movs	r3, #0
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3720      	adds	r7, #32
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	40021000 	.word	0x40021000
 80022ec:	019f800c 	.word	0x019f800c
 80022f0:	feeefffc 	.word	0xfeeefffc

080022f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b086      	sub	sp, #24
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80022fe:	2300      	movs	r3, #0
 8002300:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d101      	bne.n	800230c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	e11e      	b.n	800254a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800230c:	4b91      	ldr	r3, [pc, #580]	@ (8002554 <HAL_RCC_ClockConfig+0x260>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 030f 	and.w	r3, r3, #15
 8002314:	683a      	ldr	r2, [r7, #0]
 8002316:	429a      	cmp	r2, r3
 8002318:	d910      	bls.n	800233c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800231a:	4b8e      	ldr	r3, [pc, #568]	@ (8002554 <HAL_RCC_ClockConfig+0x260>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f023 020f 	bic.w	r2, r3, #15
 8002322:	498c      	ldr	r1, [pc, #560]	@ (8002554 <HAL_RCC_ClockConfig+0x260>)
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	4313      	orrs	r3, r2
 8002328:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800232a:	4b8a      	ldr	r3, [pc, #552]	@ (8002554 <HAL_RCC_ClockConfig+0x260>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 030f 	and.w	r3, r3, #15
 8002332:	683a      	ldr	r2, [r7, #0]
 8002334:	429a      	cmp	r2, r3
 8002336:	d001      	beq.n	800233c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e106      	b.n	800254a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0301 	and.w	r3, r3, #1
 8002344:	2b00      	cmp	r3, #0
 8002346:	d073      	beq.n	8002430 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	2b03      	cmp	r3, #3
 800234e:	d129      	bne.n	80023a4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002350:	4b81      	ldr	r3, [pc, #516]	@ (8002558 <HAL_RCC_ClockConfig+0x264>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002358:	2b00      	cmp	r3, #0
 800235a:	d101      	bne.n	8002360 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e0f4      	b.n	800254a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002360:	f000 f972 	bl	8002648 <RCC_GetSysClockFreqFromPLLSource>
 8002364:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	4a7c      	ldr	r2, [pc, #496]	@ (800255c <HAL_RCC_ClockConfig+0x268>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d93f      	bls.n	80023ee <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800236e:	4b7a      	ldr	r3, [pc, #488]	@ (8002558 <HAL_RCC_ClockConfig+0x264>)
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d009      	beq.n	800238e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002382:	2b00      	cmp	r3, #0
 8002384:	d033      	beq.n	80023ee <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800238a:	2b00      	cmp	r3, #0
 800238c:	d12f      	bne.n	80023ee <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800238e:	4b72      	ldr	r3, [pc, #456]	@ (8002558 <HAL_RCC_ClockConfig+0x264>)
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002396:	4a70      	ldr	r2, [pc, #448]	@ (8002558 <HAL_RCC_ClockConfig+0x264>)
 8002398:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800239c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800239e:	2380      	movs	r3, #128	@ 0x80
 80023a0:	617b      	str	r3, [r7, #20]
 80023a2:	e024      	b.n	80023ee <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	2b02      	cmp	r3, #2
 80023aa:	d107      	bne.n	80023bc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023ac:	4b6a      	ldr	r3, [pc, #424]	@ (8002558 <HAL_RCC_ClockConfig+0x264>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d109      	bne.n	80023cc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e0c6      	b.n	800254a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023bc:	4b66      	ldr	r3, [pc, #408]	@ (8002558 <HAL_RCC_ClockConfig+0x264>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d101      	bne.n	80023cc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e0be      	b.n	800254a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80023cc:	f000 f8ce 	bl	800256c <HAL_RCC_GetSysClockFreq>
 80023d0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	4a61      	ldr	r2, [pc, #388]	@ (800255c <HAL_RCC_ClockConfig+0x268>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d909      	bls.n	80023ee <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80023da:	4b5f      	ldr	r3, [pc, #380]	@ (8002558 <HAL_RCC_ClockConfig+0x264>)
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80023e2:	4a5d      	ldr	r2, [pc, #372]	@ (8002558 <HAL_RCC_ClockConfig+0x264>)
 80023e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80023e8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80023ea:	2380      	movs	r3, #128	@ 0x80
 80023ec:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80023ee:	4b5a      	ldr	r3, [pc, #360]	@ (8002558 <HAL_RCC_ClockConfig+0x264>)
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	f023 0203 	bic.w	r2, r3, #3
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	4957      	ldr	r1, [pc, #348]	@ (8002558 <HAL_RCC_ClockConfig+0x264>)
 80023fc:	4313      	orrs	r3, r2
 80023fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002400:	f7fe fb4a 	bl	8000a98 <HAL_GetTick>
 8002404:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002406:	e00a      	b.n	800241e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002408:	f7fe fb46 	bl	8000a98 <HAL_GetTick>
 800240c:	4602      	mov	r2, r0
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002416:	4293      	cmp	r3, r2
 8002418:	d901      	bls.n	800241e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e095      	b.n	800254a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800241e:	4b4e      	ldr	r3, [pc, #312]	@ (8002558 <HAL_RCC_ClockConfig+0x264>)
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	f003 020c 	and.w	r2, r3, #12
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	429a      	cmp	r2, r3
 800242e:	d1eb      	bne.n	8002408 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0302 	and.w	r3, r3, #2
 8002438:	2b00      	cmp	r3, #0
 800243a:	d023      	beq.n	8002484 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0304 	and.w	r3, r3, #4
 8002444:	2b00      	cmp	r3, #0
 8002446:	d005      	beq.n	8002454 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002448:	4b43      	ldr	r3, [pc, #268]	@ (8002558 <HAL_RCC_ClockConfig+0x264>)
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	4a42      	ldr	r2, [pc, #264]	@ (8002558 <HAL_RCC_ClockConfig+0x264>)
 800244e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002452:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 0308 	and.w	r3, r3, #8
 800245c:	2b00      	cmp	r3, #0
 800245e:	d007      	beq.n	8002470 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002460:	4b3d      	ldr	r3, [pc, #244]	@ (8002558 <HAL_RCC_ClockConfig+0x264>)
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002468:	4a3b      	ldr	r2, [pc, #236]	@ (8002558 <HAL_RCC_ClockConfig+0x264>)
 800246a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800246e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002470:	4b39      	ldr	r3, [pc, #228]	@ (8002558 <HAL_RCC_ClockConfig+0x264>)
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	4936      	ldr	r1, [pc, #216]	@ (8002558 <HAL_RCC_ClockConfig+0x264>)
 800247e:	4313      	orrs	r3, r2
 8002480:	608b      	str	r3, [r1, #8]
 8002482:	e008      	b.n	8002496 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	2b80      	cmp	r3, #128	@ 0x80
 8002488:	d105      	bne.n	8002496 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800248a:	4b33      	ldr	r3, [pc, #204]	@ (8002558 <HAL_RCC_ClockConfig+0x264>)
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	4a32      	ldr	r2, [pc, #200]	@ (8002558 <HAL_RCC_ClockConfig+0x264>)
 8002490:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002494:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002496:	4b2f      	ldr	r3, [pc, #188]	@ (8002554 <HAL_RCC_ClockConfig+0x260>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 030f 	and.w	r3, r3, #15
 800249e:	683a      	ldr	r2, [r7, #0]
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d21d      	bcs.n	80024e0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024a4:	4b2b      	ldr	r3, [pc, #172]	@ (8002554 <HAL_RCC_ClockConfig+0x260>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f023 020f 	bic.w	r2, r3, #15
 80024ac:	4929      	ldr	r1, [pc, #164]	@ (8002554 <HAL_RCC_ClockConfig+0x260>)
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80024b4:	f7fe faf0 	bl	8000a98 <HAL_GetTick>
 80024b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ba:	e00a      	b.n	80024d2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024bc:	f7fe faec 	bl	8000a98 <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d901      	bls.n	80024d2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80024ce:	2303      	movs	r3, #3
 80024d0:	e03b      	b.n	800254a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024d2:	4b20      	ldr	r3, [pc, #128]	@ (8002554 <HAL_RCC_ClockConfig+0x260>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 030f 	and.w	r3, r3, #15
 80024da:	683a      	ldr	r2, [r7, #0]
 80024dc:	429a      	cmp	r2, r3
 80024de:	d1ed      	bne.n	80024bc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 0304 	and.w	r3, r3, #4
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d008      	beq.n	80024fe <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024ec:	4b1a      	ldr	r3, [pc, #104]	@ (8002558 <HAL_RCC_ClockConfig+0x264>)
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	4917      	ldr	r1, [pc, #92]	@ (8002558 <HAL_RCC_ClockConfig+0x264>)
 80024fa:	4313      	orrs	r3, r2
 80024fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0308 	and.w	r3, r3, #8
 8002506:	2b00      	cmp	r3, #0
 8002508:	d009      	beq.n	800251e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800250a:	4b13      	ldr	r3, [pc, #76]	@ (8002558 <HAL_RCC_ClockConfig+0x264>)
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	691b      	ldr	r3, [r3, #16]
 8002516:	00db      	lsls	r3, r3, #3
 8002518:	490f      	ldr	r1, [pc, #60]	@ (8002558 <HAL_RCC_ClockConfig+0x264>)
 800251a:	4313      	orrs	r3, r2
 800251c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800251e:	f000 f825 	bl	800256c <HAL_RCC_GetSysClockFreq>
 8002522:	4602      	mov	r2, r0
 8002524:	4b0c      	ldr	r3, [pc, #48]	@ (8002558 <HAL_RCC_ClockConfig+0x264>)
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	091b      	lsrs	r3, r3, #4
 800252a:	f003 030f 	and.w	r3, r3, #15
 800252e:	490c      	ldr	r1, [pc, #48]	@ (8002560 <HAL_RCC_ClockConfig+0x26c>)
 8002530:	5ccb      	ldrb	r3, [r1, r3]
 8002532:	f003 031f 	and.w	r3, r3, #31
 8002536:	fa22 f303 	lsr.w	r3, r2, r3
 800253a:	4a0a      	ldr	r2, [pc, #40]	@ (8002564 <HAL_RCC_ClockConfig+0x270>)
 800253c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800253e:	4b0a      	ldr	r3, [pc, #40]	@ (8002568 <HAL_RCC_ClockConfig+0x274>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4618      	mov	r0, r3
 8002544:	f7fe fa5c 	bl	8000a00 <HAL_InitTick>
 8002548:	4603      	mov	r3, r0
}
 800254a:	4618      	mov	r0, r3
 800254c:	3718      	adds	r7, #24
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	40022000 	.word	0x40022000
 8002558:	40021000 	.word	0x40021000
 800255c:	04c4b400 	.word	0x04c4b400
 8002560:	080030d8 	.word	0x080030d8
 8002564:	20000228 	.word	0x20000228
 8002568:	2000022c 	.word	0x2000022c

0800256c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800256c:	b480      	push	{r7}
 800256e:	b087      	sub	sp, #28
 8002570:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002572:	4b2c      	ldr	r3, [pc, #176]	@ (8002624 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	f003 030c 	and.w	r3, r3, #12
 800257a:	2b04      	cmp	r3, #4
 800257c:	d102      	bne.n	8002584 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800257e:	4b2a      	ldr	r3, [pc, #168]	@ (8002628 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002580:	613b      	str	r3, [r7, #16]
 8002582:	e047      	b.n	8002614 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002584:	4b27      	ldr	r3, [pc, #156]	@ (8002624 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	f003 030c 	and.w	r3, r3, #12
 800258c:	2b08      	cmp	r3, #8
 800258e:	d102      	bne.n	8002596 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002590:	4b26      	ldr	r3, [pc, #152]	@ (800262c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002592:	613b      	str	r3, [r7, #16]
 8002594:	e03e      	b.n	8002614 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002596:	4b23      	ldr	r3, [pc, #140]	@ (8002624 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	f003 030c 	and.w	r3, r3, #12
 800259e:	2b0c      	cmp	r3, #12
 80025a0:	d136      	bne.n	8002610 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80025a2:	4b20      	ldr	r3, [pc, #128]	@ (8002624 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	f003 0303 	and.w	r3, r3, #3
 80025aa:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80025ac:	4b1d      	ldr	r3, [pc, #116]	@ (8002624 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	091b      	lsrs	r3, r3, #4
 80025b2:	f003 030f 	and.w	r3, r3, #15
 80025b6:	3301      	adds	r3, #1
 80025b8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2b03      	cmp	r3, #3
 80025be:	d10c      	bne.n	80025da <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80025c0:	4a1a      	ldr	r2, [pc, #104]	@ (800262c <HAL_RCC_GetSysClockFreq+0xc0>)
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80025c8:	4a16      	ldr	r2, [pc, #88]	@ (8002624 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025ca:	68d2      	ldr	r2, [r2, #12]
 80025cc:	0a12      	lsrs	r2, r2, #8
 80025ce:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80025d2:	fb02 f303 	mul.w	r3, r2, r3
 80025d6:	617b      	str	r3, [r7, #20]
      break;
 80025d8:	e00c      	b.n	80025f4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80025da:	4a13      	ldr	r2, [pc, #76]	@ (8002628 <HAL_RCC_GetSysClockFreq+0xbc>)
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	fbb2 f3f3 	udiv	r3, r2, r3
 80025e2:	4a10      	ldr	r2, [pc, #64]	@ (8002624 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025e4:	68d2      	ldr	r2, [r2, #12]
 80025e6:	0a12      	lsrs	r2, r2, #8
 80025e8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80025ec:	fb02 f303 	mul.w	r3, r2, r3
 80025f0:	617b      	str	r3, [r7, #20]
      break;
 80025f2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80025f4:	4b0b      	ldr	r3, [pc, #44]	@ (8002624 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	0e5b      	lsrs	r3, r3, #25
 80025fa:	f003 0303 	and.w	r3, r3, #3
 80025fe:	3301      	adds	r3, #1
 8002600:	005b      	lsls	r3, r3, #1
 8002602:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002604:	697a      	ldr	r2, [r7, #20]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	fbb2 f3f3 	udiv	r3, r2, r3
 800260c:	613b      	str	r3, [r7, #16]
 800260e:	e001      	b.n	8002614 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002610:	2300      	movs	r3, #0
 8002612:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002614:	693b      	ldr	r3, [r7, #16]
}
 8002616:	4618      	mov	r0, r3
 8002618:	371c      	adds	r7, #28
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr
 8002622:	bf00      	nop
 8002624:	40021000 	.word	0x40021000
 8002628:	00f42400 	.word	0x00f42400
 800262c:	007a1200 	.word	0x007a1200

08002630 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002630:	b480      	push	{r7}
 8002632:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002634:	4b03      	ldr	r3, [pc, #12]	@ (8002644 <HAL_RCC_GetHCLKFreq+0x14>)
 8002636:	681b      	ldr	r3, [r3, #0]
}
 8002638:	4618      	mov	r0, r3
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop
 8002644:	20000228 	.word	0x20000228

08002648 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002648:	b480      	push	{r7}
 800264a:	b087      	sub	sp, #28
 800264c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800264e:	4b1e      	ldr	r3, [pc, #120]	@ (80026c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002650:	68db      	ldr	r3, [r3, #12]
 8002652:	f003 0303 	and.w	r3, r3, #3
 8002656:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002658:	4b1b      	ldr	r3, [pc, #108]	@ (80026c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	091b      	lsrs	r3, r3, #4
 800265e:	f003 030f 	and.w	r3, r3, #15
 8002662:	3301      	adds	r3, #1
 8002664:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	2b03      	cmp	r3, #3
 800266a:	d10c      	bne.n	8002686 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800266c:	4a17      	ldr	r2, [pc, #92]	@ (80026cc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	fbb2 f3f3 	udiv	r3, r2, r3
 8002674:	4a14      	ldr	r2, [pc, #80]	@ (80026c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002676:	68d2      	ldr	r2, [r2, #12]
 8002678:	0a12      	lsrs	r2, r2, #8
 800267a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800267e:	fb02 f303 	mul.w	r3, r2, r3
 8002682:	617b      	str	r3, [r7, #20]
    break;
 8002684:	e00c      	b.n	80026a0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002686:	4a12      	ldr	r2, [pc, #72]	@ (80026d0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	fbb2 f3f3 	udiv	r3, r2, r3
 800268e:	4a0e      	ldr	r2, [pc, #56]	@ (80026c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002690:	68d2      	ldr	r2, [r2, #12]
 8002692:	0a12      	lsrs	r2, r2, #8
 8002694:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002698:	fb02 f303 	mul.w	r3, r2, r3
 800269c:	617b      	str	r3, [r7, #20]
    break;
 800269e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80026a0:	4b09      	ldr	r3, [pc, #36]	@ (80026c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	0e5b      	lsrs	r3, r3, #25
 80026a6:	f003 0303 	and.w	r3, r3, #3
 80026aa:	3301      	adds	r3, #1
 80026ac:	005b      	lsls	r3, r3, #1
 80026ae:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80026b0:	697a      	ldr	r2, [r7, #20]
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80026b8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80026ba:	687b      	ldr	r3, [r7, #4]
}
 80026bc:	4618      	mov	r0, r3
 80026be:	371c      	adds	r7, #28
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr
 80026c8:	40021000 	.word	0x40021000
 80026cc:	007a1200 	.word	0x007a1200
 80026d0:	00f42400 	.word	0x00f42400

080026d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b082      	sub	sp, #8
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d101      	bne.n	80026e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e049      	b.n	800277a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d106      	bne.n	8002700 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f7fe f8ca 	bl	8000894 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2202      	movs	r2, #2
 8002704:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	3304      	adds	r3, #4
 8002710:	4619      	mov	r1, r3
 8002712:	4610      	mov	r0, r2
 8002714:	f000 f9bc 	bl	8002a90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2201      	movs	r2, #1
 800271c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2201      	movs	r2, #1
 8002724:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2201      	movs	r2, #1
 800272c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2201      	movs	r2, #1
 8002734:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2201      	movs	r2, #1
 800273c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2201      	movs	r2, #1
 8002744:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2201      	movs	r2, #1
 800274c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2201      	movs	r2, #1
 8002754:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2201      	movs	r2, #1
 800275c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2201      	movs	r2, #1
 8002764:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2201      	movs	r2, #1
 800276c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2201      	movs	r2, #1
 8002774:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002778:	2300      	movs	r3, #0
}
 800277a:	4618      	mov	r0, r3
 800277c:	3708      	adds	r7, #8
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
	...

08002784 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002784:	b480      	push	{r7}
 8002786:	b085      	sub	sp, #20
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002792:	b2db      	uxtb	r3, r3
 8002794:	2b01      	cmp	r3, #1
 8002796:	d001      	beq.n	800279c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e04c      	b.n	8002836 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2202      	movs	r2, #2
 80027a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a26      	ldr	r2, [pc, #152]	@ (8002844 <HAL_TIM_Base_Start+0xc0>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d022      	beq.n	80027f4 <HAL_TIM_Base_Start+0x70>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80027b6:	d01d      	beq.n	80027f4 <HAL_TIM_Base_Start+0x70>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a22      	ldr	r2, [pc, #136]	@ (8002848 <HAL_TIM_Base_Start+0xc4>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d018      	beq.n	80027f4 <HAL_TIM_Base_Start+0x70>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a21      	ldr	r2, [pc, #132]	@ (800284c <HAL_TIM_Base_Start+0xc8>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d013      	beq.n	80027f4 <HAL_TIM_Base_Start+0x70>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a1f      	ldr	r2, [pc, #124]	@ (8002850 <HAL_TIM_Base_Start+0xcc>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d00e      	beq.n	80027f4 <HAL_TIM_Base_Start+0x70>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a1e      	ldr	r2, [pc, #120]	@ (8002854 <HAL_TIM_Base_Start+0xd0>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d009      	beq.n	80027f4 <HAL_TIM_Base_Start+0x70>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a1c      	ldr	r2, [pc, #112]	@ (8002858 <HAL_TIM_Base_Start+0xd4>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d004      	beq.n	80027f4 <HAL_TIM_Base_Start+0x70>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a1b      	ldr	r2, [pc, #108]	@ (800285c <HAL_TIM_Base_Start+0xd8>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d115      	bne.n	8002820 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	689a      	ldr	r2, [r3, #8]
 80027fa:	4b19      	ldr	r3, [pc, #100]	@ (8002860 <HAL_TIM_Base_Start+0xdc>)
 80027fc:	4013      	ands	r3, r2
 80027fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2b06      	cmp	r3, #6
 8002804:	d015      	beq.n	8002832 <HAL_TIM_Base_Start+0xae>
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800280c:	d011      	beq.n	8002832 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f042 0201 	orr.w	r2, r2, #1
 800281c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800281e:	e008      	b.n	8002832 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f042 0201 	orr.w	r2, r2, #1
 800282e:	601a      	str	r2, [r3, #0]
 8002830:	e000      	b.n	8002834 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002832:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002834:	2300      	movs	r3, #0
}
 8002836:	4618      	mov	r0, r3
 8002838:	3714      	adds	r7, #20
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr
 8002842:	bf00      	nop
 8002844:	40012c00 	.word	0x40012c00
 8002848:	40000400 	.word	0x40000400
 800284c:	40000800 	.word	0x40000800
 8002850:	40000c00 	.word	0x40000c00
 8002854:	40013400 	.word	0x40013400
 8002858:	40014000 	.word	0x40014000
 800285c:	40015000 	.word	0x40015000
 8002860:	00010007 	.word	0x00010007

08002864 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b084      	sub	sp, #16
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800286e:	2300      	movs	r3, #0
 8002870:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002878:	2b01      	cmp	r3, #1
 800287a:	d101      	bne.n	8002880 <HAL_TIM_ConfigClockSource+0x1c>
 800287c:	2302      	movs	r3, #2
 800287e:	e0f6      	b.n	8002a6e <HAL_TIM_ConfigClockSource+0x20a>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2201      	movs	r2, #1
 8002884:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2202      	movs	r2, #2
 800288c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800289e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80028a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80028aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	68ba      	ldr	r2, [r7, #8]
 80028b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a6f      	ldr	r2, [pc, #444]	@ (8002a78 <HAL_TIM_ConfigClockSource+0x214>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	f000 80c1 	beq.w	8002a42 <HAL_TIM_ConfigClockSource+0x1de>
 80028c0:	4a6d      	ldr	r2, [pc, #436]	@ (8002a78 <HAL_TIM_ConfigClockSource+0x214>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	f200 80c6 	bhi.w	8002a54 <HAL_TIM_ConfigClockSource+0x1f0>
 80028c8:	4a6c      	ldr	r2, [pc, #432]	@ (8002a7c <HAL_TIM_ConfigClockSource+0x218>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	f000 80b9 	beq.w	8002a42 <HAL_TIM_ConfigClockSource+0x1de>
 80028d0:	4a6a      	ldr	r2, [pc, #424]	@ (8002a7c <HAL_TIM_ConfigClockSource+0x218>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	f200 80be 	bhi.w	8002a54 <HAL_TIM_ConfigClockSource+0x1f0>
 80028d8:	4a69      	ldr	r2, [pc, #420]	@ (8002a80 <HAL_TIM_ConfigClockSource+0x21c>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	f000 80b1 	beq.w	8002a42 <HAL_TIM_ConfigClockSource+0x1de>
 80028e0:	4a67      	ldr	r2, [pc, #412]	@ (8002a80 <HAL_TIM_ConfigClockSource+0x21c>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	f200 80b6 	bhi.w	8002a54 <HAL_TIM_ConfigClockSource+0x1f0>
 80028e8:	4a66      	ldr	r2, [pc, #408]	@ (8002a84 <HAL_TIM_ConfigClockSource+0x220>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	f000 80a9 	beq.w	8002a42 <HAL_TIM_ConfigClockSource+0x1de>
 80028f0:	4a64      	ldr	r2, [pc, #400]	@ (8002a84 <HAL_TIM_ConfigClockSource+0x220>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	f200 80ae 	bhi.w	8002a54 <HAL_TIM_ConfigClockSource+0x1f0>
 80028f8:	4a63      	ldr	r2, [pc, #396]	@ (8002a88 <HAL_TIM_ConfigClockSource+0x224>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	f000 80a1 	beq.w	8002a42 <HAL_TIM_ConfigClockSource+0x1de>
 8002900:	4a61      	ldr	r2, [pc, #388]	@ (8002a88 <HAL_TIM_ConfigClockSource+0x224>)
 8002902:	4293      	cmp	r3, r2
 8002904:	f200 80a6 	bhi.w	8002a54 <HAL_TIM_ConfigClockSource+0x1f0>
 8002908:	4a60      	ldr	r2, [pc, #384]	@ (8002a8c <HAL_TIM_ConfigClockSource+0x228>)
 800290a:	4293      	cmp	r3, r2
 800290c:	f000 8099 	beq.w	8002a42 <HAL_TIM_ConfigClockSource+0x1de>
 8002910:	4a5e      	ldr	r2, [pc, #376]	@ (8002a8c <HAL_TIM_ConfigClockSource+0x228>)
 8002912:	4293      	cmp	r3, r2
 8002914:	f200 809e 	bhi.w	8002a54 <HAL_TIM_ConfigClockSource+0x1f0>
 8002918:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800291c:	f000 8091 	beq.w	8002a42 <HAL_TIM_ConfigClockSource+0x1de>
 8002920:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8002924:	f200 8096 	bhi.w	8002a54 <HAL_TIM_ConfigClockSource+0x1f0>
 8002928:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800292c:	f000 8089 	beq.w	8002a42 <HAL_TIM_ConfigClockSource+0x1de>
 8002930:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002934:	f200 808e 	bhi.w	8002a54 <HAL_TIM_ConfigClockSource+0x1f0>
 8002938:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800293c:	d03e      	beq.n	80029bc <HAL_TIM_ConfigClockSource+0x158>
 800293e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002942:	f200 8087 	bhi.w	8002a54 <HAL_TIM_ConfigClockSource+0x1f0>
 8002946:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800294a:	f000 8086 	beq.w	8002a5a <HAL_TIM_ConfigClockSource+0x1f6>
 800294e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002952:	d87f      	bhi.n	8002a54 <HAL_TIM_ConfigClockSource+0x1f0>
 8002954:	2b70      	cmp	r3, #112	@ 0x70
 8002956:	d01a      	beq.n	800298e <HAL_TIM_ConfigClockSource+0x12a>
 8002958:	2b70      	cmp	r3, #112	@ 0x70
 800295a:	d87b      	bhi.n	8002a54 <HAL_TIM_ConfigClockSource+0x1f0>
 800295c:	2b60      	cmp	r3, #96	@ 0x60
 800295e:	d050      	beq.n	8002a02 <HAL_TIM_ConfigClockSource+0x19e>
 8002960:	2b60      	cmp	r3, #96	@ 0x60
 8002962:	d877      	bhi.n	8002a54 <HAL_TIM_ConfigClockSource+0x1f0>
 8002964:	2b50      	cmp	r3, #80	@ 0x50
 8002966:	d03c      	beq.n	80029e2 <HAL_TIM_ConfigClockSource+0x17e>
 8002968:	2b50      	cmp	r3, #80	@ 0x50
 800296a:	d873      	bhi.n	8002a54 <HAL_TIM_ConfigClockSource+0x1f0>
 800296c:	2b40      	cmp	r3, #64	@ 0x40
 800296e:	d058      	beq.n	8002a22 <HAL_TIM_ConfigClockSource+0x1be>
 8002970:	2b40      	cmp	r3, #64	@ 0x40
 8002972:	d86f      	bhi.n	8002a54 <HAL_TIM_ConfigClockSource+0x1f0>
 8002974:	2b30      	cmp	r3, #48	@ 0x30
 8002976:	d064      	beq.n	8002a42 <HAL_TIM_ConfigClockSource+0x1de>
 8002978:	2b30      	cmp	r3, #48	@ 0x30
 800297a:	d86b      	bhi.n	8002a54 <HAL_TIM_ConfigClockSource+0x1f0>
 800297c:	2b20      	cmp	r3, #32
 800297e:	d060      	beq.n	8002a42 <HAL_TIM_ConfigClockSource+0x1de>
 8002980:	2b20      	cmp	r3, #32
 8002982:	d867      	bhi.n	8002a54 <HAL_TIM_ConfigClockSource+0x1f0>
 8002984:	2b00      	cmp	r3, #0
 8002986:	d05c      	beq.n	8002a42 <HAL_TIM_ConfigClockSource+0x1de>
 8002988:	2b10      	cmp	r3, #16
 800298a:	d05a      	beq.n	8002a42 <HAL_TIM_ConfigClockSource+0x1de>
 800298c:	e062      	b.n	8002a54 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800299e:	f000 f9a7 	bl	8002cf0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80029b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	68ba      	ldr	r2, [r7, #8]
 80029b8:	609a      	str	r2, [r3, #8]
      break;
 80029ba:	e04f      	b.n	8002a5c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80029cc:	f000 f990 	bl	8002cf0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	689a      	ldr	r2, [r3, #8]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80029de:	609a      	str	r2, [r3, #8]
      break;
 80029e0:	e03c      	b.n	8002a5c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80029ee:	461a      	mov	r2, r3
 80029f0:	f000 f902 	bl	8002bf8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	2150      	movs	r1, #80	@ 0x50
 80029fa:	4618      	mov	r0, r3
 80029fc:	f000 f95b 	bl	8002cb6 <TIM_ITRx_SetConfig>
      break;
 8002a00:	e02c      	b.n	8002a5c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a0e:	461a      	mov	r2, r3
 8002a10:	f000 f921 	bl	8002c56 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	2160      	movs	r1, #96	@ 0x60
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f000 f94b 	bl	8002cb6 <TIM_ITRx_SetConfig>
      break;
 8002a20:	e01c      	b.n	8002a5c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a2e:	461a      	mov	r2, r3
 8002a30:	f000 f8e2 	bl	8002bf8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	2140      	movs	r1, #64	@ 0x40
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f000 f93b 	bl	8002cb6 <TIM_ITRx_SetConfig>
      break;
 8002a40:	e00c      	b.n	8002a5c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	4610      	mov	r0, r2
 8002a4e:	f000 f932 	bl	8002cb6 <TIM_ITRx_SetConfig>
      break;
 8002a52:	e003      	b.n	8002a5c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	73fb      	strb	r3, [r7, #15]
      break;
 8002a58:	e000      	b.n	8002a5c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8002a5a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2200      	movs	r2, #0
 8002a68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002a6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3710      	adds	r7, #16
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	00100070 	.word	0x00100070
 8002a7c:	00100060 	.word	0x00100060
 8002a80:	00100050 	.word	0x00100050
 8002a84:	00100040 	.word	0x00100040
 8002a88:	00100030 	.word	0x00100030
 8002a8c:	00100020 	.word	0x00100020

08002a90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b085      	sub	sp, #20
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	4a4c      	ldr	r2, [pc, #304]	@ (8002bd4 <TIM_Base_SetConfig+0x144>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d017      	beq.n	8002ad8 <TIM_Base_SetConfig+0x48>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002aae:	d013      	beq.n	8002ad8 <TIM_Base_SetConfig+0x48>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	4a49      	ldr	r2, [pc, #292]	@ (8002bd8 <TIM_Base_SetConfig+0x148>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d00f      	beq.n	8002ad8 <TIM_Base_SetConfig+0x48>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	4a48      	ldr	r2, [pc, #288]	@ (8002bdc <TIM_Base_SetConfig+0x14c>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d00b      	beq.n	8002ad8 <TIM_Base_SetConfig+0x48>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	4a47      	ldr	r2, [pc, #284]	@ (8002be0 <TIM_Base_SetConfig+0x150>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d007      	beq.n	8002ad8 <TIM_Base_SetConfig+0x48>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	4a46      	ldr	r2, [pc, #280]	@ (8002be4 <TIM_Base_SetConfig+0x154>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d003      	beq.n	8002ad8 <TIM_Base_SetConfig+0x48>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	4a45      	ldr	r2, [pc, #276]	@ (8002be8 <TIM_Base_SetConfig+0x158>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d108      	bne.n	8002aea <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ade:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	68fa      	ldr	r2, [r7, #12]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4a39      	ldr	r2, [pc, #228]	@ (8002bd4 <TIM_Base_SetConfig+0x144>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d023      	beq.n	8002b3a <TIM_Base_SetConfig+0xaa>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002af8:	d01f      	beq.n	8002b3a <TIM_Base_SetConfig+0xaa>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	4a36      	ldr	r2, [pc, #216]	@ (8002bd8 <TIM_Base_SetConfig+0x148>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d01b      	beq.n	8002b3a <TIM_Base_SetConfig+0xaa>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4a35      	ldr	r2, [pc, #212]	@ (8002bdc <TIM_Base_SetConfig+0x14c>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d017      	beq.n	8002b3a <TIM_Base_SetConfig+0xaa>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4a34      	ldr	r2, [pc, #208]	@ (8002be0 <TIM_Base_SetConfig+0x150>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d013      	beq.n	8002b3a <TIM_Base_SetConfig+0xaa>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4a33      	ldr	r2, [pc, #204]	@ (8002be4 <TIM_Base_SetConfig+0x154>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d00f      	beq.n	8002b3a <TIM_Base_SetConfig+0xaa>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4a33      	ldr	r2, [pc, #204]	@ (8002bec <TIM_Base_SetConfig+0x15c>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d00b      	beq.n	8002b3a <TIM_Base_SetConfig+0xaa>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4a32      	ldr	r2, [pc, #200]	@ (8002bf0 <TIM_Base_SetConfig+0x160>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d007      	beq.n	8002b3a <TIM_Base_SetConfig+0xaa>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4a31      	ldr	r2, [pc, #196]	@ (8002bf4 <TIM_Base_SetConfig+0x164>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d003      	beq.n	8002b3a <TIM_Base_SetConfig+0xaa>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4a2c      	ldr	r2, [pc, #176]	@ (8002be8 <TIM_Base_SetConfig+0x158>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d108      	bne.n	8002b4c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	68db      	ldr	r3, [r3, #12]
 8002b46:	68fa      	ldr	r2, [r7, #12]
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	695b      	ldr	r3, [r3, #20]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	68fa      	ldr	r2, [r7, #12]
 8002b5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	689a      	ldr	r2, [r3, #8]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	4a18      	ldr	r2, [pc, #96]	@ (8002bd4 <TIM_Base_SetConfig+0x144>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d013      	beq.n	8002ba0 <TIM_Base_SetConfig+0x110>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	4a1a      	ldr	r2, [pc, #104]	@ (8002be4 <TIM_Base_SetConfig+0x154>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d00f      	beq.n	8002ba0 <TIM_Base_SetConfig+0x110>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	4a1a      	ldr	r2, [pc, #104]	@ (8002bec <TIM_Base_SetConfig+0x15c>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d00b      	beq.n	8002ba0 <TIM_Base_SetConfig+0x110>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	4a19      	ldr	r2, [pc, #100]	@ (8002bf0 <TIM_Base_SetConfig+0x160>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d007      	beq.n	8002ba0 <TIM_Base_SetConfig+0x110>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	4a18      	ldr	r2, [pc, #96]	@ (8002bf4 <TIM_Base_SetConfig+0x164>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d003      	beq.n	8002ba0 <TIM_Base_SetConfig+0x110>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	4a13      	ldr	r2, [pc, #76]	@ (8002be8 <TIM_Base_SetConfig+0x158>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d103      	bne.n	8002ba8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	691a      	ldr	r2, [r3, #16]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2201      	movs	r2, #1
 8002bac:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	691b      	ldr	r3, [r3, #16]
 8002bb2:	f003 0301 	and.w	r3, r3, #1
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d105      	bne.n	8002bc6 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	691b      	ldr	r3, [r3, #16]
 8002bbe:	f023 0201 	bic.w	r2, r3, #1
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	611a      	str	r2, [r3, #16]
  }
}
 8002bc6:	bf00      	nop
 8002bc8:	3714      	adds	r7, #20
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr
 8002bd2:	bf00      	nop
 8002bd4:	40012c00 	.word	0x40012c00
 8002bd8:	40000400 	.word	0x40000400
 8002bdc:	40000800 	.word	0x40000800
 8002be0:	40000c00 	.word	0x40000c00
 8002be4:	40013400 	.word	0x40013400
 8002be8:	40015000 	.word	0x40015000
 8002bec:	40014000 	.word	0x40014000
 8002bf0:	40014400 	.word	0x40014400
 8002bf4:	40014800 	.word	0x40014800

08002bf8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b087      	sub	sp, #28
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	60f8      	str	r0, [r7, #12]
 8002c00:	60b9      	str	r1, [r7, #8]
 8002c02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	6a1b      	ldr	r3, [r3, #32]
 8002c08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	6a1b      	ldr	r3, [r3, #32]
 8002c0e:	f023 0201 	bic.w	r2, r3, #1
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	699b      	ldr	r3, [r3, #24]
 8002c1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002c22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	011b      	lsls	r3, r3, #4
 8002c28:	693a      	ldr	r2, [r7, #16]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	f023 030a 	bic.w	r3, r3, #10
 8002c34:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002c36:	697a      	ldr	r2, [r7, #20]
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	693a      	ldr	r2, [r7, #16]
 8002c42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	697a      	ldr	r2, [r7, #20]
 8002c48:	621a      	str	r2, [r3, #32]
}
 8002c4a:	bf00      	nop
 8002c4c:	371c      	adds	r7, #28
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr

08002c56 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c56:	b480      	push	{r7}
 8002c58:	b087      	sub	sp, #28
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	60f8      	str	r0, [r7, #12]
 8002c5e:	60b9      	str	r1, [r7, #8]
 8002c60:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	6a1b      	ldr	r3, [r3, #32]
 8002c66:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	6a1b      	ldr	r3, [r3, #32]
 8002c6c:	f023 0210 	bic.w	r2, r3, #16
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	699b      	ldr	r3, [r3, #24]
 8002c78:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002c80:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	031b      	lsls	r3, r3, #12
 8002c86:	693a      	ldr	r2, [r7, #16]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002c92:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	011b      	lsls	r3, r3, #4
 8002c98:	697a      	ldr	r2, [r7, #20]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	693a      	ldr	r2, [r7, #16]
 8002ca2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	697a      	ldr	r2, [r7, #20]
 8002ca8:	621a      	str	r2, [r3, #32]
}
 8002caa:	bf00      	nop
 8002cac:	371c      	adds	r7, #28
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr

08002cb6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002cb6:	b480      	push	{r7}
 8002cb8:	b085      	sub	sp, #20
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	6078      	str	r0, [r7, #4]
 8002cbe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8002ccc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002cd0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002cd2:	683a      	ldr	r2, [r7, #0]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	f043 0307 	orr.w	r3, r3, #7
 8002cdc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	68fa      	ldr	r2, [r7, #12]
 8002ce2:	609a      	str	r2, [r3, #8]
}
 8002ce4:	bf00      	nop
 8002ce6:	3714      	adds	r7, #20
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr

08002cf0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b087      	sub	sp, #28
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	60b9      	str	r1, [r7, #8]
 8002cfa:	607a      	str	r2, [r7, #4]
 8002cfc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002d0a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	021a      	lsls	r2, r3, #8
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	431a      	orrs	r2, r3
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	4313      	orrs	r3, r2
 8002d18:	697a      	ldr	r2, [r7, #20]
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	697a      	ldr	r2, [r7, #20]
 8002d22:	609a      	str	r2, [r3, #8]
}
 8002d24:	bf00      	nop
 8002d26:	371c      	adds	r7, #28
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr

08002d30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b085      	sub	sp, #20
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d101      	bne.n	8002d48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d44:	2302      	movs	r3, #2
 8002d46:	e074      	b.n	8002e32 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2202      	movs	r2, #2
 8002d54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a34      	ldr	r2, [pc, #208]	@ (8002e40 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d009      	beq.n	8002d86 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a33      	ldr	r2, [pc, #204]	@ (8002e44 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d004      	beq.n	8002d86 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a31      	ldr	r2, [pc, #196]	@ (8002e48 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d108      	bne.n	8002d98 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8002d8c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	68fa      	ldr	r2, [r7, #12]
 8002d94:	4313      	orrs	r3, r2
 8002d96:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8002d9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002da2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	68fa      	ldr	r2, [r7, #12]
 8002daa:	4313      	orrs	r3, r2
 8002dac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	68fa      	ldr	r2, [r7, #12]
 8002db4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a21      	ldr	r2, [pc, #132]	@ (8002e40 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d022      	beq.n	8002e06 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002dc8:	d01d      	beq.n	8002e06 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a1f      	ldr	r2, [pc, #124]	@ (8002e4c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d018      	beq.n	8002e06 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a1d      	ldr	r2, [pc, #116]	@ (8002e50 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d013      	beq.n	8002e06 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a1c      	ldr	r2, [pc, #112]	@ (8002e54 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d00e      	beq.n	8002e06 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a15      	ldr	r2, [pc, #84]	@ (8002e44 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d009      	beq.n	8002e06 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a18      	ldr	r2, [pc, #96]	@ (8002e58 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d004      	beq.n	8002e06 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a11      	ldr	r2, [pc, #68]	@ (8002e48 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d10c      	bne.n	8002e20 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002e0c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	68ba      	ldr	r2, [r7, #8]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	68ba      	ldr	r2, [r7, #8]
 8002e1e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2201      	movs	r2, #1
 8002e24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002e30:	2300      	movs	r3, #0
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3714      	adds	r7, #20
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr
 8002e3e:	bf00      	nop
 8002e40:	40012c00 	.word	0x40012c00
 8002e44:	40013400 	.word	0x40013400
 8002e48:	40015000 	.word	0x40015000
 8002e4c:	40000400 	.word	0x40000400
 8002e50:	40000800 	.word	0x40000800
 8002e54:	40000c00 	.word	0x40000c00
 8002e58:	40014000 	.word	0x40014000

08002e5c <arm_biquad_cascade_df1_init_f32>:
 8002e5c:	b510      	push	{r4, lr}
 8002e5e:	6001      	str	r1, [r0, #0]
 8002e60:	6082      	str	r2, [r0, #8]
 8002e62:	4604      	mov	r4, r0
 8002e64:	010a      	lsls	r2, r1, #4
 8002e66:	4618      	mov	r0, r3
 8002e68:	2100      	movs	r1, #0
 8002e6a:	f000 f8fd 	bl	8003068 <memset>
 8002e6e:	6060      	str	r0, [r4, #4]
 8002e70:	bd10      	pop	{r4, pc}
 8002e72:	bf00      	nop

08002e74 <arm_biquad_cascade_df1_f32>:
 8002e74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002e78:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
 8002e7c:	4694      	mov	ip, r2
 8002e7e:	ea4f 0e93 	mov.w	lr, r3, lsr #2
 8002e82:	6807      	ldr	r7, [r0, #0]
 8002e84:	3614      	adds	r6, #20
 8002e86:	3510      	adds	r5, #16
 8002e88:	f003 0203 	and.w	r2, r3, #3
 8002e8c:	ea4f 190e 	mov.w	r9, lr, lsl #4
 8002e90:	eb0c 180e 	add.w	r8, ip, lr, lsl #4
 8002e94:	ed16 4a05 	vldr	s8, [r6, #-20]	@ 0xffffffec
 8002e98:	ed16 2a04 	vldr	s4, [r6, #-16]
 8002e9c:	ed56 2a03 	vldr	s5, [r6, #-12]
 8002ea0:	ed16 3a02 	vldr	s6, [r6, #-8]
 8002ea4:	ed56 3a01 	vldr	s7, [r6, #-4]
 8002ea8:	ed55 5a04 	vldr	s11, [r5, #-16]
 8002eac:	ed15 5a03 	vldr	s10, [r5, #-12]
 8002eb0:	ed15 7a02 	vldr	s14, [r5, #-8]
 8002eb4:	ed55 7a01 	vldr	s15, [r5, #-4]
 8002eb8:	f1be 0f00 	cmp.w	lr, #0
 8002ebc:	f000 80cf 	beq.w	800305e <arm_biquad_cascade_df1_f32+0x1ea>
 8002ec0:	f101 0010 	add.w	r0, r1, #16
 8002ec4:	f10c 0310 	add.w	r3, ip, #16
 8002ec8:	4674      	mov	r4, lr
 8002eca:	ed10 6a04 	vldr	s12, [r0, #-16]
 8002ece:	ee62 4a25 	vmul.f32	s9, s4, s11
 8002ed2:	ee64 6a06 	vmul.f32	s13, s8, s12
 8002ed6:	ee22 5a85 	vmul.f32	s10, s5, s10
 8002eda:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8002ede:	ee63 4a07 	vmul.f32	s9, s6, s14
 8002ee2:	ee76 6a85 	vadd.f32	s13, s13, s10
 8002ee6:	ee23 5aa7 	vmul.f32	s10, s7, s15
 8002eea:	ee76 7aa4 	vadd.f32	s15, s13, s9
 8002eee:	ee22 1a06 	vmul.f32	s2, s4, s12
 8002ef2:	ee77 7a85 	vadd.f32	s15, s15, s10
 8002ef6:	ee62 1aa5 	vmul.f32	s3, s5, s11
 8002efa:	ed43 7a04 	vstr	s15, [r3, #-16]
 8002efe:	ed50 4a03 	vldr	s9, [r0, #-12]
 8002f02:	ee64 6a24 	vmul.f32	s13, s8, s9
 8002f06:	ee23 5a27 	vmul.f32	s10, s6, s15
 8002f0a:	ee76 6a81 	vadd.f32	s13, s13, s2
 8002f0e:	ee63 5a87 	vmul.f32	s11, s7, s14
 8002f12:	ee36 7aa1 	vadd.f32	s14, s13, s3
 8002f16:	ee62 1a24 	vmul.f32	s3, s4, s9
 8002f1a:	ee37 7a05 	vadd.f32	s14, s14, s10
 8002f1e:	ee22 6a86 	vmul.f32	s12, s5, s12
 8002f22:	ee37 7a25 	vadd.f32	s14, s14, s11
 8002f26:	ee63 7aa7 	vmul.f32	s15, s7, s15
 8002f2a:	ed03 7a03 	vstr	s14, [r3, #-12]
 8002f2e:	ed10 5a02 	vldr	s10, [r0, #-8]
 8002f32:	ee64 5a05 	vmul.f32	s11, s8, s10
 8002f36:	ee63 6a07 	vmul.f32	s13, s6, s14
 8002f3a:	ee75 5aa1 	vadd.f32	s11, s11, s3
 8002f3e:	ee62 1a05 	vmul.f32	s3, s4, s10
 8002f42:	ee75 5a86 	vadd.f32	s11, s11, s12
 8002f46:	ee62 4aa4 	vmul.f32	s9, s5, s9
 8002f4a:	ee75 5aa6 	vadd.f32	s11, s11, s13
 8002f4e:	ee23 7a87 	vmul.f32	s14, s7, s14
 8002f52:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8002f56:	3c01      	subs	r4, #1
 8002f58:	ed43 7a02 	vstr	s15, [r3, #-8]
 8002f5c:	ed50 5a01 	vldr	s11, [r0, #-4]
 8002f60:	ee24 6a25 	vmul.f32	s12, s8, s11
 8002f64:	ee63 6a27 	vmul.f32	s13, s6, s15
 8002f68:	ee36 6a21 	vadd.f32	s12, s12, s3
 8002f6c:	f100 0010 	add.w	r0, r0, #16
 8002f70:	ee36 6a24 	vadd.f32	s12, s12, s9
 8002f74:	f103 0310 	add.w	r3, r3, #16
 8002f78:	ee36 6a26 	vadd.f32	s12, s12, s13
 8002f7c:	ee36 7a07 	vadd.f32	s14, s12, s14
 8002f80:	ed03 7a05 	vstr	s14, [r3, #-20]	@ 0xffffffec
 8002f84:	d1a1      	bne.n	8002eca <arm_biquad_cascade_df1_f32+0x56>
 8002f86:	4449      	add	r1, r9
 8002f88:	4643      	mov	r3, r8
 8002f8a:	2a00      	cmp	r2, #0
 8002f8c:	d045      	beq.n	800301a <arm_biquad_cascade_df1_f32+0x1a6>
 8002f8e:	edd1 4a00 	vldr	s9, [r1]
 8002f92:	ee22 6a25 	vmul.f32	s12, s4, s11
 8002f96:	ee64 1a24 	vmul.f32	s3, s8, s9
 8002f9a:	ee62 6a85 	vmul.f32	s13, s5, s10
 8002f9e:	ee36 5a21 	vadd.f32	s10, s12, s3
 8002fa2:	ee23 6a07 	vmul.f32	s12, s6, s14
 8002fa6:	ee35 5a26 	vadd.f32	s10, s10, s13
 8002faa:	ee63 7aa7 	vmul.f32	s15, s7, s15
 8002fae:	ee35 6a06 	vadd.f32	s12, s10, s12
 8002fb2:	2a01      	cmp	r2, #1
 8002fb4:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002fb8:	ed83 6a00 	vstr	s12, [r3]
 8002fbc:	d03d      	beq.n	800303a <arm_biquad_cascade_df1_f32+0x1c6>
 8002fbe:	ed91 5a01 	vldr	s10, [r1, #4]
 8002fc2:	ee62 7a24 	vmul.f32	s15, s4, s9
 8002fc6:	ee65 1a04 	vmul.f32	s3, s10, s8
 8002fca:	ee62 6aa5 	vmul.f32	s13, s5, s11
 8002fce:	ee77 5aa1 	vadd.f32	s11, s15, s3
 8002fd2:	ee63 7a06 	vmul.f32	s15, s6, s12
 8002fd6:	ee75 5aa6 	vadd.f32	s11, s11, s13
 8002fda:	ee23 7a87 	vmul.f32	s14, s7, s14
 8002fde:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8002fe2:	2a02      	cmp	r2, #2
 8002fe4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fe8:	edc3 7a01 	vstr	s15, [r3, #4]
 8002fec:	d02e      	beq.n	800304c <arm_biquad_cascade_df1_f32+0x1d8>
 8002fee:	edd1 5a02 	vldr	s11, [r1, #8]
 8002ff2:	ee25 2a02 	vmul.f32	s4, s10, s4
 8002ff6:	ee64 6a25 	vmul.f32	s13, s8, s11
 8002ffa:	ee62 2aa4 	vmul.f32	s5, s5, s9
 8002ffe:	ee76 6a82 	vadd.f32	s13, s13, s4
 8003002:	ee27 3a83 	vmul.f32	s6, s15, s6
 8003006:	ee76 6aa2 	vadd.f32	s13, s13, s5
 800300a:	ee63 3a86 	vmul.f32	s7, s7, s12
 800300e:	ee76 6a83 	vadd.f32	s13, s13, s6
 8003012:	ee36 7aa3 	vadd.f32	s14, s13, s7
 8003016:	ed83 7a02 	vstr	s14, [r3, #8]
 800301a:	3f01      	subs	r7, #1
 800301c:	ed45 5a04 	vstr	s11, [r5, #-16]
 8003020:	ed05 5a03 	vstr	s10, [r5, #-12]
 8003024:	ed05 7a02 	vstr	s14, [r5, #-8]
 8003028:	ed45 7a01 	vstr	s15, [r5, #-4]
 800302c:	f106 0614 	add.w	r6, r6, #20
 8003030:	f105 0510 	add.w	r5, r5, #16
 8003034:	d015      	beq.n	8003062 <arm_biquad_cascade_df1_f32+0x1ee>
 8003036:	4661      	mov	r1, ip
 8003038:	e72c      	b.n	8002e94 <arm_biquad_cascade_df1_f32+0x20>
 800303a:	eef0 7a47 	vmov.f32	s15, s14
 800303e:	eeb0 5a65 	vmov.f32	s10, s11
 8003042:	eeb0 7a46 	vmov.f32	s14, s12
 8003046:	eef0 5a64 	vmov.f32	s11, s9
 800304a:	e7e6      	b.n	800301a <arm_biquad_cascade_df1_f32+0x1a6>
 800304c:	eeb0 7a67 	vmov.f32	s14, s15
 8003050:	eef0 5a45 	vmov.f32	s11, s10
 8003054:	eef0 7a46 	vmov.f32	s15, s12
 8003058:	eeb0 5a64 	vmov.f32	s10, s9
 800305c:	e7dd      	b.n	800301a <arm_biquad_cascade_df1_f32+0x1a6>
 800305e:	4663      	mov	r3, ip
 8003060:	e793      	b.n	8002f8a <arm_biquad_cascade_df1_f32+0x116>
 8003062:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003066:	bf00      	nop

08003068 <memset>:
 8003068:	4402      	add	r2, r0
 800306a:	4603      	mov	r3, r0
 800306c:	4293      	cmp	r3, r2
 800306e:	d100      	bne.n	8003072 <memset+0xa>
 8003070:	4770      	bx	lr
 8003072:	f803 1b01 	strb.w	r1, [r3], #1
 8003076:	e7f9      	b.n	800306c <memset+0x4>

08003078 <__libc_init_array>:
 8003078:	b570      	push	{r4, r5, r6, lr}
 800307a:	4d0d      	ldr	r5, [pc, #52]	@ (80030b0 <__libc_init_array+0x38>)
 800307c:	4c0d      	ldr	r4, [pc, #52]	@ (80030b4 <__libc_init_array+0x3c>)
 800307e:	1b64      	subs	r4, r4, r5
 8003080:	10a4      	asrs	r4, r4, #2
 8003082:	2600      	movs	r6, #0
 8003084:	42a6      	cmp	r6, r4
 8003086:	d109      	bne.n	800309c <__libc_init_array+0x24>
 8003088:	4d0b      	ldr	r5, [pc, #44]	@ (80030b8 <__libc_init_array+0x40>)
 800308a:	4c0c      	ldr	r4, [pc, #48]	@ (80030bc <__libc_init_array+0x44>)
 800308c:	f000 f818 	bl	80030c0 <_init>
 8003090:	1b64      	subs	r4, r4, r5
 8003092:	10a4      	asrs	r4, r4, #2
 8003094:	2600      	movs	r6, #0
 8003096:	42a6      	cmp	r6, r4
 8003098:	d105      	bne.n	80030a6 <__libc_init_array+0x2e>
 800309a:	bd70      	pop	{r4, r5, r6, pc}
 800309c:	f855 3b04 	ldr.w	r3, [r5], #4
 80030a0:	4798      	blx	r3
 80030a2:	3601      	adds	r6, #1
 80030a4:	e7ee      	b.n	8003084 <__libc_init_array+0xc>
 80030a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80030aa:	4798      	blx	r3
 80030ac:	3601      	adds	r6, #1
 80030ae:	e7f2      	b.n	8003096 <__libc_init_array+0x1e>
 80030b0:	080030e8 	.word	0x080030e8
 80030b4:	080030e8 	.word	0x080030e8
 80030b8:	080030e8 	.word	0x080030e8
 80030bc:	080030ec 	.word	0x080030ec

080030c0 <_init>:
 80030c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030c2:	bf00      	nop
 80030c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030c6:	bc08      	pop	{r3}
 80030c8:	469e      	mov	lr, r3
 80030ca:	4770      	bx	lr

080030cc <_fini>:
 80030cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030ce:	bf00      	nop
 80030d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030d2:	bc08      	pop	{r3}
 80030d4:	469e      	mov	lr, r3
 80030d6:	4770      	bx	lr
